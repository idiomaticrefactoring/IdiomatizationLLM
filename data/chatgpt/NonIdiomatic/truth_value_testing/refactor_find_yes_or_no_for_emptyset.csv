repo_name,file_path,file_html,class_name,me_name,me_code,old_code,new_code,bool_code,chatGPT_code,if_correct,reversed_code,non_replace_var_refactored_code,refactored_code,acc,instruction,sys_msg,exam_msg,user_msg
cx['h'] % k == 0,cannot be refactored by truth value test,not cx['h'] % k,0
cx['w'] % k == 0,cannot be refactored by truth value test,not cx['w'] % k,0
cx['h'] % k == 0,cannot be refactored by truth value test,Cannot refactor,-1
cx['w'] % k == 0,cannot be refactored by truth value test,Cannot refactor,-1
cx['h'] % k == 0,cannot be refactored by truth value test,Cannot refactor,-1
cx['w'] % k == 0,cannot be refactored by truth value test,Cannot refactor,-1
cx['h'] % k == 0,cannot be refactored by truth value test,Cannot refactor,-1
cx['w'] % k == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.rwlock == 0,not self.rwlock,not self.rwlock,1
len(gt_boxes) == 0,not gt_boxes,not gt_boxes,1
len(gt_boxes) == 0,not gt_boxes,not gt_boxes,1
len(prediction) == 0,not prediction,not prediction,1
_gt_overlaps[j] == gt_ovr,cannot be refactored by truth value test,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,not gt_boxes,1
len(gt_boxes) == 0,not gt_boxes,not gt_boxes,1
len(prediction) == 0,not prediction,Cannot refactor,-1
_gt_overlaps[j] == gt_ovr,cannot be refactored by truth value test,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,not gt_boxes,1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(prediction) == 0,not prediction,Cannot refactor,-1
_gt_overlaps[j] == gt_ovr,cannot be refactored by truth value test,Cannot refactor,-1
0 == query.Bool()._min_should_match,not query.Bool()._min_should_match,not query.Bool()._min_should_match,1
points.ndim == 2,cannot be refactored by truth value test,Cannot refactor,-1
points.shape[1] == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(points) % 2 == 0,not len(points) % 2,not len(points) % 2,1
c != 0,c,c,1
param == AlarmEnum.ALL,cannot be refactored by truth value test,Cannot refactor,-1
param == AlarmEnum.TOP,cannot be refactored by truth value test,Cannot refactor,-1
run_all == 1,cannot be refactored by truth value test,Cannot refactor,-1
param == AlarmEnum.PENDING,cannot be refactored by truth value test,Cannot refactor,-1
run_all == 1,cannot be refactored by truth value test,Cannot refactor,-1
param == AlarmEnum.HISTORY,cannot be refactored by truth value test,Cannot refactor,-1
run_all == 1,cannot be refactored by truth value test,Cannot refactor,-1
param == AlarmEnum.TOP,cannot be refactored by truth value test,Cannot refactor,-1
run_all == 1,cannot be refactored by truth value test,Cannot refactor,-1
param == AlarmEnum.PENDING,cannot be refactored by truth value test,Cannot refactor,-1
run_all == 1,cannot be refactored by truth value test,Cannot refactor,-1
param == AlarmEnum.HISTORY,cannot be refactored by truth value test,Cannot refactor,-1
run_all == 1,cannot be refactored by truth value test,Cannot refactor,-1
benchmark.validation_callbacks() == [],not benchmark.validation_callbacks(),not benchmark.validation_callbacks(),1
benchmark.validation_callbacks() == [a],cannot be refactored by truth value test,Cannot refactor,-1
"benchmark.validation_callbacks() == [a, a]",cannot be refactored by truth value test,Cannot refactor,-1
matches == [],not matches,not matches,1
matches == [],not matches,Cannot refactor,-1
"my_data_connector.self_check() == {'class_name': 'ConfiguredAssetFilesystemDataConnector', 'data_asset_count': 1, 'example_data_asset_names': ['alpha'], 'data_assets': {'alpha': {'example_data_references': ['alpha-1.csv', 'alpha-2.csv', 'alpha-3.csv'], 'batch_definition_count': 3}}, 'example_unmatched_data_references': [], 'unmatched_data_reference_count': 0}",cannot be refactored by truth value test,Cannot refactor,-1
my_data_connector.get_data_reference_list_count() == 3,cannot be refactored by truth value test,Cannot refactor,-1
my_data_connector.get_unmatched_data_references() == [],not my_data_connector.get_unmatched_data_references(),not my_data_connector.get_unmatched_data_references(),1
publisher_key != block_header.signer_public_key,cannot be refactored by truth value test,Cannot refactor,-1
self._min_wait_time == 0,not self._min_wait_time,not self._min_wait_time,1
self.max == 0,not self.max,not self.max,1
self.min == 0,not self.min,not self.min,1
self.max == 0,not self.max,Cannot refactor,-1
self.min == 0,not self.min,Cannot refactor,-1
t % 200 == 0,cannot be refactored by truth value test,not t % 200,0
p.returncode != 0,cannot be refactored by truth value test,p.returncode,0
e.errno == errno.ENOENT,cannot be refactored by truth value test,Cannot refactor,-1
len(layer.data) == 0,not layer.data,not layer.data,1
layer.nshapes == len(data),cannot be refactored by truth value test,Cannot refactor,-1
ld == d,cannot be refactored by truth value test,Cannot refactor,-1
layer.ndim == 2,cannot be refactored by truth value test,Cannot refactor,-1
s == so,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 1,cannot be refactored by truth value test,Cannot refactor,-1
self.b_handling == 0,not self.b_handling,not self.b_handling,1
dotDir == 2,cannot be refactored by truth value test,Cannot refactor,-1
self.b_handling == 1,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 3,cannot be refactored by truth value test,Cannot refactor,-1
self.b_handling == 2,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 4,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 5,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 6,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 7,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 8,cannot be refactored by truth value test,Cannot refactor,-1
dotDir != 0,cannot be refactored by truth value test,dotDir,0
dotDir == 1,cannot be refactored by truth value test,Cannot refactor,-1
self.b_handling == 0,not self.b_handling,Cannot refactor,-1
dotDir == 2,cannot be refactored by truth value test,Cannot refactor,-1
self.b_handling == 1,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 3,cannot be refactored by truth value test,Cannot refactor,-1
self.b_handling == 2,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 4,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 5,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 6,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 7,cannot be refactored by truth value test,Cannot refactor,-1
dotDir == 8,cannot be refactored by truth value test,Cannot refactor,-1
dotDir != 0,cannot be refactored by truth value test,Cannot refactor,-1
width == 0,not width,not width,1
height == 0,not height,not height,1
width == 0,not width,Cannot refactor,-1
height == 0,not height,not height,1
width == 0,not width,Cannot refactor,-1
height == 0,not height,Cannot refactor,-1
width == 0,not width,Cannot refactor,-1
height == 0,not height,Cannot refactor,-1
self.last_stat != 1,cannot be refactored by truth value test,Cannot refactor,-1
self.last_stat != 0,self.last_stat,self.last_stat,1
self.type != 'IPv6 Teredo',cannot be refactored by truth value test,Cannot refactor,-1
self.last_stat != 1,cannot be refactored by truth value test,Cannot refactor,-1
self.last_stat != 0,self.last_stat,Cannot refactor,-1
self.type != 'IPv6',self.type == 'IPv6',Cannot refactor,-1
self.type != 'IPv6 6to4',cannot be refactored by truth value test,Cannot refactor,-1
self.type != 'IPv6 Global',cannot be refactored by truth value test,Cannot refactor,-1
self.type != 'IPv6',self.type == 'IPv6',Cannot refactor,-1
self.type != 'IPv6',self.type == 'IPv6',Cannot refactor,-1
padding == 'valid',cannot be refactored by truth value test,Cannot refactor,-1
padding == 'same',cannot be refactored by truth value test,Cannot refactor,-1
padding == 'valid',cannot be refactored by truth value test,Cannot refactor,-1
padding == 'same',cannot be refactored by truth value test,Cannot refactor,-1
padding == 'valid',cannot be refactored by truth value test,Cannot refactor,-1
idx % 2 == 0,not idx % 2,not idx % 2,1
result.exit_code == 0,cannot be refactored by truth value test,not result.exit_code,0
[u.email for u in hackers_group.user_set.all()] == [],not [u.email for u in hackers_group.user_set.all()],not [u.email for u in hackers_group.user_set.all()],1
obj == Unresolvable,cannot be refactored by truth value test,Cannot refactor,-1
len(subtypes) == 0,not subtypes,not subtypes,1
len(subtypes) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(subtypes) == 0,not subtypes,not subtypes,1
len(subtypes) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj == Undefined,cannot be refactored by truth value test,Cannot refactor,-1
obj == Unresolvable,cannot be refactored by truth value test,Cannot refactor,-1
len(subtypes) == 0,not subtypes,Cannot refactor,-1
len(subtypes) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(subtypes) == 0,not subtypes,Cannot refactor,-1
len(subtypes) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj == Undefined,cannot be refactored by truth value test,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(predictions) == 0,not predictions,not predictions,1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(predictions) == 0,not predictions,Cannot refactor,-1
_gt_overlaps[j] == gt_ovr,cannot be refactored by truth value test,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(predictions) == 0,not predictions,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(predictions) == 0,not predictions,Cannot refactor,-1
_gt_overlaps[j] == gt_ovr,cannot be refactored by truth value test,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(predictions) == 0,not predictions,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
len(predictions) == 0,not predictions,Cannot refactor,-1
_gt_overlaps[j] == gt_ovr,cannot be refactored by truth value test,Cannot refactor,-1
stdw % stride != 0,cannot be refactored by truth value test,stdw % stride,0
stdh % stride != 0,cannot be refactored by truth value test,stdh % stride,0
stdw % stride != 0,cannot be refactored by truth value test,Cannot refactor,-1
stdh % stride != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == mode,cannot be refactored by truth value test,Cannot refactor,-1
index & bit != 0,cannot be refactored by truth value test,index & bit,0
"slice2len(slice(None), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(11), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 11), 10) == 9",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 1), 10) == 0","not slice2len(slice(1, 1), 10)","not slice2len(slice(1, 1), 10)",1
"slice2len(slice(1, 11, 2), 10) == 5",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(0, 11, 3), 10) == 4",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 11, 3), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -1), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(11, None, -1), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, 1, -1), 10) == 8",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -2), 10) == 5",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -3), 10) == 4",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, 0, -3), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, -4, -1), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(-4, -2, 1), 10) == 2",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(3, 2, 1), 10) == 0","not slice2len(slice(3, 2, 1), 10)","not slice2len(slice(3, 2, 1), 10)",1
"slice2len(slice(2, 3, -1), 10) == 0",cannot be refactored by truth value test,"not slice2len(slice(2, 3, -1), 10)",0
"slice2len(slice(None), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(11), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 11), 10) == 9",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 1), 10) == 0","not slice2len(slice(1, 1), 10)",Cannot refactor,-1
"slice2len(slice(1, 11, 2), 10) == 5",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(0, 11, 3), 10) == 4",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 11, 3), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -1), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(11, None, -1), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, 1, -1), 10) == 8",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -2), 10) == 5",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -3), 10) == 4",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, 0, -3), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, -4, -1), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(-4, -2, 1), 10) == 2",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(3, 2, 1), 10) == 0",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(2, 3, -1), 10) == 0",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(11), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 11), 10) == 9",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 1), 10) == 0","not slice2len(slice(1, 1), 10)",Cannot refactor,-1
"slice2len(slice(1, 11, 2), 10) == 5",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(0, 11, 3), 10) == 4",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(1, 11, 3), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -1), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(11, None, -1), 10) == 10",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, 1, -1), 10) == 8",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -2), 10) == 5",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, None, -3), 10) == 4",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, 0, -3), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(None, -4, -1), 10) == 3",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(-4, -2, 1), 10) == 2",cannot be refactored by truth value test,Cannot refactor,-1
"slice2len(slice(3, 2, 1), 10) == 0","not slice2len(slice(3, 2, 1), 10)",Cannot refactor,-1
"slice2len(slice(2, 3, -1), 10) == 0",cannot be refactored by truth value test,Cannot refactor,-1
opt[k] != 0,opt[k],opt[k],1
model_opt[k] != 0,model_opt[k],model_opt[k],1
opt[k] != 0,opt[k],Cannot refactor,-1
model_opt[k] != 0,model_opt[k],Cannot refactor,-1
ret == 0,not ret,not ret,1
self.buf[1] != REPORT_ID,cannot be refactored by truth value test,Cannot refactor,-1
self.buf[1] != REPORT_ID,cannot be refactored by truth value test,Cannot refactor,-1
v['_class'] == 'Dataset',cannot be refactored by truth value test,Cannot refactor,-1
limit == 0.0,not limit,not limit,1
limit == 0,not limit,not limit,1
v['_class'] == 'Dataset',cannot be refactored by truth value test,Cannot refactor,-1
limit == 0.0,not limit,Cannot refactor,-1
limit == 0,not limit,Cannot refactor,-1
len(result) == 0,not result,not result,1
level == 0,not level,not level,1
level == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(set(ann_ids)) == len(ann_ids),cannot be refactored by truth value test,Cannot refactor,-1
anno['image_id'] == image_id,cannot be refactored by truth value test,Cannot refactor,-1
len(segm) == len(valid_segm),cannot be refactored by truth value test,Cannot refactor,-1
len(poly) % 2 == 0,cannot be refactored by truth value test,not len(poly) % 2,0
masks.size(1) == kernel_size * kernel_size * group_size,cannot be refactored by truth value test,Cannot refactor,-1
masks.size(-1) == features.size(-1) * scale_factor,cannot be refactored by truth value test,Cannot refactor,-1
masks.size(-2) == features.size(-2) * scale_factor,cannot be refactored by truth value test,Cannot refactor,-1
features.size(1) % group_size == 0,cannot be refactored by truth value test,not features.size(1) % group_size,0
(kernel_size - 1) % 2 == 0,cannot be refactored by truth value test,not (kernel_size - 1) % 2,0
(kernel_size - 1) % 2 == 0,not (kernel_size - 1) % 2,Cannot refactor,-1
masks.size(1) == kernel_size * kernel_size * group_size,cannot be refactored by truth value test,Cannot refactor,-1
masks.size(-1) == features.size(-1) * scale_factor,cannot be refactored by truth value test,Cannot refactor,-1
masks.size(-2) == features.size(-2) * scale_factor,cannot be refactored by truth value test,Cannot refactor,-1
features.size(1) % group_size == 0,cannot be refactored by truth value test,Cannot refactor,-1
(kernel_size - 1) % 2 == 0,not (kernel_size - 1) % 2,Cannot refactor,-1
(kernel_size - 1) % 2 == 0,not (kernel_size - 1) % 2,Cannot refactor,-1
self.vx != 0,self.vx,self.vx,1
self.vy != 0,self.vy,self.vy,1
self.vx != 0,self.vx,Cannot refactor,-1
self.vy != 0,self.vy,Cannot refactor,-1
self.vx != 0,self.vx,Cannot refactor,-1
self.vy != 0,self.vy,Cannot refactor,-1
self.vx != 0,self.vx,Cannot refactor,-1
self.vy != 0,self.vy,Cannot refactor,-1
resp['ErrorCode'] != 0,cannot be refactored by truth value test,resp['ErrorCode'],0
resp2['ErrorCode'] != 0,cannot be refactored by truth value test,resp2['ErrorCode'],0
resp3['ErrorCode'] != 0,cannot be refactored by truth value test,resp3['ErrorCode'],0
resp4['ErrorCode'] != 0,cannot be refactored by truth value test,resp4['ErrorCode'],0
resp['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp2['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp3['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp4['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp2['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp3['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp4['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp2['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp3['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
resp4['ErrorCode'] != 0,cannot be refactored by truth value test,Cannot refactor,-1
filetime == 0,not filetime,not filetime,1
"pt_checksum([8, 8, 2, 8, 2, 1, 6, 5, 2]) == 2",cannot be refactored by truth value test,Cannot refactor,-1
"pt_checksum([8, 8, 2, 8, 2, 1, 6, 5, 2, 2]) == 0","not pt_checksum([8, 8, 2, 8, 2, 1, 6, 5, 2, 2])","not pt_checksum([8, 8, 2, 8, 2, 1, 6, 5, 2, 2])",1
axis != 0,axis,axis,1
len(percentile_cols) == 0,not percentile_cols,not percentile_cols,1
axis != 0,axis,axis,1
len(percentile_cols) == 0,not percentile_cols,Cannot refactor,-1
len(search_result) == 0,not search_result,not search_result,1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,not N % 16,1
CI % 16 == 0,not CI % 16,not CI % 16,1
CO % 16 == 0,not CO % 16,not CO % 16,1
N % 8 == 0,not N % 8,not N % 8,1
CI % 16 == 0,not CI % 16,not CI % 16,1
CO % 32 == 0,cannot be refactored by truth value test,not CO % 32,0
N % 32 == 0,not N % 32,not N % 32,1
CI % 16 == 0,not CI % 16,not CI % 16,1
CO % 8 == 0,cannot be refactored by truth value test,not CO % 8,0
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
layout == 'NCDHW',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
target.kind.name == 'cuda',cannot be refactored by truth value test,Cannot refactor,-1
kh == kw,cannot be refactored by truth value test,Cannot refactor,-1
stride_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
stride_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_h == 1,cannot be refactored by truth value test,Cannot refactor,-1
dilation_w == 1,cannot be refactored by truth value test,Cannot refactor,-1
attrs['groups'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
out_type == 'float16',cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,cannot be refactored by truth value test,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 16 == 0,not N % 16,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 16 == 0,not CO % 16,Cannot refactor,-1
N % 8 == 0,not N % 8,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 32 == 0,cannot be refactored by truth value test,Cannot refactor,-1
N % 32 == 0,not N % 32,Cannot refactor,-1
CI % 16 == 0,not CI % 16,Cannot refactor,-1
CO % 8 == 0,cannot be refactored by truth value test,Cannot refactor,-1
self._keypoint_supervision == True,self._keypoint_supervision,self._keypoint_supervision,1
self._keypoint_supervision == True,self._keypoint_supervision,Cannot refactor,-1
len(mtraces) == 0,not mtraces,not mtraces,1
len(st) != chain_len,cannot be refactored by truth value test,Cannot refactor,-1
len(strace) != chain_len,cannot be refactored by truth value test,Cannot refactor,-1
sz == 0,not sz,not sz,1
stat.status_code != 412,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,not i,1
i % 360 == 0,cannot be refactored by truth value test,not i % 360,0
i == 0,not i,not i,1
v == firstval,cannot be refactored by truth value test,Cannot refactor,-1
i % period == 0,not i % period,not i % period,1
v == firstval,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,not i,1
i % 360 == 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,not i,1
v == firstval,cannot be refactored by truth value test,Cannot refactor,-1
i % period == 0,not i % period,Cannot refactor,-1
v == firstval,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,not i,1
i % 360 == 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,not i,1
v == firstval,cannot be refactored by truth value test,Cannot refactor,-1
i % period == 0,not i % period,Cannot refactor,-1
v == firstval,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,not i,1
i % 360 == 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,not i,1
v == firstval,cannot be refactored by truth value test,Cannot refactor,-1
i % period == 0,not i % period,Cannot refactor,-1
v == firstval,cannot be refactored by truth value test,Cannot refactor,-1
embedding_dim % 2 != 0,cannot be refactored by truth value test,embedding_dim % 2,0
l2[0].get_output_for.call_count == 0,cannot be refactored by truth value test,not l2[0].get_output_for.call_count,0
p.call_count == 0,not p.call_count,not p.call_count,1
l2[0].get_output_for.call_count == 0,cannot be refactored by truth value test,Cannot refactor,-1
p.call_count == 0,cannot be refactored by truth value test,Cannot refactor,-1
(i + 1) % args.report_steps == 0,cannot be refactored by truth value test,not (i + 1) % args.report_steps,0
self.render_mode == 'human',cannot be refactored by truth value test,Cannot refactor,-1
self.state[self.agents[0]] == self.state[self.agents[1]],cannot be refactored by truth value test,Cannot refactor,-1
(self.state[self.agents[0]] + self.state[self.agents[1]]) % 2 == 0,cannot be refactored by truth value test,not (self.state[self.agents[0]] + self.state[self.agents[1]]) % 2,0
len(self.children) == 0,cannot be refactored by truth value test,not self.children,0
len(specializingPaths) == 0,cannot be refactored by truth value test,not specializingPaths,0
len(childSpecializingPaths) == 0,cannot be refactored by truth value test,not childSpecializingPaths,0
len(self.children) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(specializingPaths) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(childSpecializingPaths) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(self.children) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(specializingPaths) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(childSpecializingPaths) == 0,cannot be refactored by truth value test,Cannot refactor,-1
retcode == 0,cannot be refactored by truth value test,not retcode,0
len(url) == 0,cannot be refactored by truth value test,not url,0
k % 500 == 0,cannot be refactored by truth value test,not k % 500,0
count == 0,cannot be refactored by truth value test,not count,0
dash_dcc.get_logs() == [],cannot be refactored by truth value test,not dash_dcc.get_logs(),0
len(self._signers) == 0,cannot be refactored by truth value test,not self._signers,0
value == None,cannot be refactored by truth value test,not value,0
find_any(sets(integers().filter(lambda s: False))) == set(),cannot be refactored by truth value test,not find_any(sets(integers().filter(lambda s: False))),0
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 101,cannot be refactored by truth value test,Cannot refactor,-1
layers == 152,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,not i,0
i == 0,cannot be refactored by truth value test,not i,0
block != 0,cannot be refactored by truth value test,block,0
i == 0,cannot be refactored by truth value test,not i,0
block != 0,cannot be refactored by truth value test,block,0
i == 0,cannot be refactored by truth value test,not i,0
block != 0,cannot be refactored by truth value test,block,0
i == 0,cannot be refactored by truth value test,not i,0
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 101,cannot be refactored by truth value test,Cannot refactor,-1
layers == 152,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,not i,0
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 101,cannot be refactored by truth value test,Cannot refactor,-1
layers == 152,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 101,cannot be refactored by truth value test,Cannot refactor,-1
layers == 152,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 34,cannot be refactored by truth value test,Cannot refactor,-1
layers == 50,cannot be refactored by truth value test,Cannot refactor,-1
layers == 101,cannot be refactored by truth value test,Cannot refactor,-1
layers == 152,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,cannot be refactored by truth value test,Cannot refactor,-1
block != 0,cannot be refactored by truth value test,Cannot refactor,-1
__name__ == '__main__',cannot be refactored by truth value test,Cannot refactor,-1
config_file == 0,cannot be refactored by truth value test,not config_file,0
key_len == 0,cannot be refactored by truth value test,not key_len,0
config_file == 1,cannot be refactored by truth value test,Cannot refactor,-1
key_len == 0,cannot be refactored by truth value test,not key_len,0
config_file == 2,cannot be refactored by truth value test,Cannot refactor,-1
__name__ == '__main__',cannot be refactored by truth value test,Cannot refactor,-1
config_file == 0,cannot be refactored by truth value test,Cannot refactor,-1
key_len == 0,cannot be refactored by truth value test,Cannot refactor,-1
config_file == 1,cannot be refactored by truth value test,Cannot refactor,-1
key_len == 0,cannot be refactored by truth value test,Cannot refactor,-1
config_file == 2,cannot be refactored by truth value test,Cannot refactor,-1
__name__ == '__main__',cannot be refactored by truth value test,Cannot refactor,-1
config_file == 0,cannot be refactored by truth value test,Cannot refactor,-1
key_len == 0,cannot be refactored by truth value test,Cannot refactor,-1
config_file == 1,cannot be refactored by truth value test,Cannot refactor,-1
key_len == 0,cannot be refactored by truth value test,Cannot refactor,-1
config_file == 2,cannot be refactored by truth value test,Cannot refactor,-1
(blocks - 2) % 9 == 0,cannot be refactored by truth value test,not (blocks - 2) % 9,0
(blocks - 2) % 6 == 0,cannot be refactored by truth value test,not (blocks - 2) % 6,0
(blocks - 2) % 9 == 0,cannot be refactored by truth value test,Cannot refactor,-1
(blocks - 2) % 6 == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(pos_samples) == 1,cannot be refactored by truth value test,Cannot refactor,-1
label == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(pos_samples) == 0,cannot be refactored by truth value test,not pos_samples,0
len(detections) == 0,cannot be refactored by truth value test,not detections,0
len(annotations) == 0,cannot be refactored by truth value test,not annotations,0
len(detections) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(annotations) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(detections) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(annotations) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(detections) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(annotations) == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(nnz_inds[0]) == 0,cannot be refactored by truth value test,not nnz_inds[0],0
len(default_size) == 2,cannot be refactored by truth value test,Cannot refactor,-1
info != False,cannot be refactored by truth value test,info,0
sourceInfo != False,cannot be refactored by truth value test,sourceInfo,0
fileUrl != False,cannot be refactored by truth value test,fileUrl,0
info != False,cannot be refactored by truth value test,Cannot refactor,-1
sourceInfo != False,cannot be refactored by truth value test,Cannot refactor,-1
fileUrl != False,cannot be refactored by truth value test,Cannot refactor,-1
info != False,cannot be refactored by truth value test,Cannot refactor,-1
sourceInfo != False,cannot be refactored by truth value test,Cannot refactor,-1
fileUrl != False,cannot be refactored by truth value test,Cannot refactor,-1
len(ids) == 0,cannot be refactored by truth value test,not ids,0
(depth - 2) % 6 == 0,cannot be refactored by truth value test,not (depth - 2) % 6,0
len(kwargs) == 0,cannot be refactored by truth value test,not kwargs,0
file_size(temp_file.name) == 0,cannot be refactored by truth value test,not file_size(temp_file.name),0
file_size(temp_file.name) == 0,cannot be refactored by truth value test,not file_size(temp_file.name),0
file_size(temp_file.name) == 0,cannot be refactored by truth value test,Cannot refactor,-1
file_size(temp_file.name) == 0,cannot be refactored by truth value test,Cannot refactor,-1
p.tokens[i].kind == close,cannot be refactored by truth value test,Cannot refactor,-1
depth == 0,cannot be refactored by truth value test,not depth,0
p.tokens[i].kind == open,cannot be refactored by truth value test,Cannot refactor,-1
element.type == 0,cannot be refactored by truth value test,not element.type,0
element.key.decode('ascii') == 'STRM',cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 4,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 32,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 6,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 128,cannot be refactored by truth value test,Cannot refactor,-1
want == None,cannot be refactored by truth value test,not want,0
self._ipversion == 4,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 32,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 6,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 128,cannot be refactored by truth value test,Cannot refactor,-1
want == None,cannot be refactored by truth value test,not want,0
want == 2,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 4,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 32,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 6,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 128,cannot be refactored by truth value test,Cannot refactor,-1
want == 3,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 4,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 32,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 6,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 128,cannot be refactored by truth value test,Cannot refactor,-1
want == None,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 4,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 32,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 6,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 128,cannot be refactored by truth value test,Cannot refactor,-1
want == None,cannot be refactored by truth value test,Cannot refactor,-1
want == 2,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 4,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 32,cannot be refactored by truth value test,Cannot refactor,-1
self._ipversion == 6,cannot be refactored by truth value test,Cannot refactor,-1
self._prefixlen == 128,cannot be refactored by truth value test,Cannot refactor,-1
want == 3,cannot be refactored by truth value test,Cannot refactor,-1
pad_amt == 0,not pad_amt,not pad_amt,1
num == 1,cannot be refactored by truth value test,Cannot refactor,-1
i != axis,cannot be refactored by truth value test,Cannot refactor,-1
i != axis,cannot be refactored by truth value test,Cannot refactor,-1
byte != 0,byte,byte,1
div == 0,not div,not div,1
len(tabs) == 0,not tabs,not tabs,1
sample[:3] == codecs.BOM_UTF8,cannot be refactored by truth value test,Cannot refactor,-1
nullcount == 0,cannot be refactored by truth value test,not nullcount,0
nullcount == 2,cannot be refactored by truth value test,Cannot refactor,-1
nullcount == 3,cannot be refactored by truth value test,Cannot refactor,-1
sample[::2] == _null2,2],Cannot refactor,-1
sample[1::2] == _null2,cannot be refactored by truth value test,Cannot refactor,-1
sample[:3] == _null3,cannot be refactored by truth value test,Cannot refactor,-1
sample[1:] == _null3,cannot be refactored by truth value test,Cannot refactor,-1
len(self) == 0,not self,not self,1
num_ckpt % mp_world_size == 0,not num_ckpt % mp_world_size,not num_ckpt % mp_world_size,1
num_beams * batch_size != batch_beam_size,cannot be refactored by truth value test,Cannot refactor,-1
this_peer_finished_flag.item() == 0.0,not this_peer_finished_flag.item(),not this_peer_finished_flag.item(),1
step % print_interval == 0,cannot be refactored by truth value test,not step % print_interval,0
encoded_prompt.size()[-1] == 0,not encoded_prompt.size()[-1],not encoded_prompt.size()[-1],1
len(files) == 0,not files,not files,1
fileType == 0,not fileType,not fileType,1
fileType == 1,cannot be refactored by truth value test,Cannot refactor,-1
fileType == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(files) == 0,not files,Cannot refactor,-1
fileType == 0,not fileType,Cannot refactor,-1
fileType == 1,cannot be refactored by truth value test,Cannot refactor,-1
fileType == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(pool) == 0,not pool,not pool,1
0 == a.compute(),not a.compute(),not a.compute(),1
0 == a.x,cannot be refactored by truth value test,not a.x,0
a.compute() == 1,cannot be refactored by truth value test,Cannot refactor,-1
a._computed == 1,cannot be refactored by truth value test,Cannot refactor,-1
a.compute() == 3,cannot be refactored by truth value test,Cannot refactor,-1
a._computed == 3,cannot be refactored by truth value test,Cannot refactor,-1
a.compute() == 5,cannot be refactored by truth value test,Cannot refactor,-1
0 == a.compute(),not a.compute(),Cannot refactor,-1
0 == a.x,cannot be refactored by truth value test,Cannot refactor,-1
a.compute() == 1,cannot be refactored by truth value test,Cannot refactor,-1
a._computed == 1,cannot be refactored by truth value test,Cannot refactor,-1
a.compute() == 3,cannot be refactored by truth value test,Cannot refactor,-1
a._computed == 3,cannot be refactored by truth value test,Cannot refactor,-1
a.compute() == 5,cannot be refactored by truth value test,Cannot refactor,-1
response.status_code == 200,cannot be refactored by truth value test,Cannot refactor,-1
response.data == b'OK',cannot be refactored by truth value test,Cannot refactor,-1
session.query(User).filter(User.username == another_user.username).count() == 0,cannot be refactored by truth value test,not session.query(User).filter(User.username == another_user.username).count(),0
self.min_sizes == [],not self.min_sizes,not self.min_sizes,1
self.max_sizes == [],not self.max_sizes,not self.max_sizes,1
self.min_sizes == [],not self.min_sizes,Cannot refactor,-1
self.max_sizes == [],not self.max_sizes,Cannot refactor,-1
self.min_sizes == [],not self.min_sizes,Cannot refactor,-1
self.max_sizes == [],not self.max_sizes,Cannot refactor,-1
self.min_sizes == [],not self.min_sizes,Cannot refactor,-1
self.max_sizes == [],not self.max_sizes,Cannot refactor,-1
len(self.data) == 0,not self.data,not self.data,1
Group.objects.all().count() == 1,cannot be refactored by truth value test,Cannot refactor,-1
Group.objects.all().first().id == invitation.group_id,cannot be refactored by truth value test,Cannot refactor,-1
GroupUser.objects.all().count() == 2,cannot be refactored by truth value test,Cannot refactor,-1
args[0][0] == user,cannot be refactored by truth value test,Cannot refactor,-1
args[0][1].id == invitation.group_id,cannot be refactored by truth value test,Cannot refactor,-1
args[0][2].email == invitation.email,cannot be refactored by truth value test,Cannot refactor,-1
args[0][2].group_id == invitation.group_id,cannot be refactored by truth value test,Cannot refactor,-1
Database.objects.all().count() == 0,not Database.objects.all().count(),not Database.objects.all().count(),1
Table.objects.all().count() == 0,not Table.objects.all().count(),not Table.objects.all().count(),1
Group.objects.all().count() == 1,cannot be refactored by truth value test,Cannot refactor,-1
Group.objects.all().first().id == invitation.group_id,cannot be refactored by truth value test,Cannot refactor,-1
GroupUser.objects.all().count() == 2,cannot be refactored by truth value test,Cannot refactor,-1
args[0][0] == user,cannot be refactored by truth value test,Cannot refactor,-1
args[0][1].id == invitation.group_id,cannot be refactored by truth value test,Cannot refactor,-1
args[0][2].email == invitation.email,cannot be refactored by truth value test,Cannot refactor,-1
args[0][2].group_id == invitation.group_id,cannot be refactored by truth value test,Cannot refactor,-1
Database.objects.all().count() == 0,not Database.objects.all().count(),Cannot refactor,-1
Table.objects.all().count() == 0,not Table.objects.all().count(),Cannot refactor,-1
len(result) == 0,not result,not result,1
gps_type == 0,not gps_type,not gps_type,1
len(ARGS) == 1,cannot be refactored by truth value test,Cannot refactor,-1
"OPTIONS.checksum != get_hash(thin_path, OPTIONS.hashfunc)",cannot be refactored by truth value test,Cannot refactor,-1
cur_code_cs != OPTIONS.code_checksum,cannot be refactored by truth value test,Cannot refactor,-1
scpstat != 0,scpstat,scpstat,1
cur_version != OPTIONS.ext_mods,cannot be refactored by truth value test,Cannot refactor,-1
len([v for v in non_version_attrs if v is not None]) != 0,[v for v in non_version_attrs if v is not None],[v for v in non_version_attrs if v is not None],1
i == 0,not i,Cannot refactor,-1
stride != 1,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
stride != 1,cannot be refactored by truth value test,Cannot refactor,-1
len(data) == 0,not data,not data,1
seed != 0,seed,seed,1
"interestingness(tbl.recommendation['Current Vis'][0], tbl) != None","interestingness(tbl.recommendation['Current Vis'][0], tbl)","interestingness(tbl.recommendation['Current Vis'][0], tbl)",1
str(tbl.recommendation['Current Vis'][0]._inferred_intent[2].value) == 'USA',cannot be refactored by truth value test,Cannot refactor,-1
len(tokens) != 0,cannot be refactored by truth value test,tokens,0
before == 0,not before,not before,1
after == 1,cannot be refactored by truth value test,Cannot refactor,-1
creds.headers('https://dummy') == expected_headers,cannot be refactored by truth value test,Cannot refactor,-1
scraper_config['extra_headers'] == expected_headers,cannot be refactored by truth value test,Cannot refactor,-1
scraper_config['extra_headers'] == {},not scraper_config['extra_headers'],not scraper_config['extra_headers'],1
option.lower() == 'reverse_tcp',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == '?',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'quit',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'os_shell',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'back',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'os_shell',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'back',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'bind_tcp',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) != 0,cannot be refactored by truth value test,settings.LPORT,0
len(settings.LHOST) != 0,cannot be refactored by truth value test,settings.LHOST,0
len(settings.LPORT) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) != 0,cannot be refactored by truth value test,Cannot refactor,-1
option[0:4].lower() == 'set ',4].lower().startswith('set'),Cannot refactor,-1
option[4:10].lower() == 'lhost ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:10].lower() == 'rhost ',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) == 0,not settings.LPORT,not settings.LPORT,1
option[4:10].lower() == 'lport ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:12].lower() == 'srvport ',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) == 0,not settings.LHOST,not settings.LHOST,1
option[4:12].lower() == 'uripath ',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'reverse_tcp',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == '?',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'quit',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'os_shell',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'back',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'os_shell',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'back',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'bind_tcp',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) != 0,cannot be refactored by truth value test,Cannot refactor,-1
option[0:4].lower() == 'set ',4].lower().startswith('set'),Cannot refactor,-1
option[4:10].lower() == 'lhost ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:10].lower() == 'rhost ',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) == 0,not settings.LPORT,Cannot refactor,-1
option[4:10].lower() == 'lport ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:12].lower() == 'srvport ',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) == 0,not settings.LHOST,Cannot refactor,-1
option[4:12].lower() == 'uripath ',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'reverse_tcp',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == '?',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'quit',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'os_shell',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'back',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'os_shell',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'back',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'bind_tcp',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) != 0,cannot be refactored by truth value test,Cannot refactor,-1
option[0:4].lower() == 'set ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:10].lower() == 'lhost ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:10].lower() == 'rhost ',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) == 0,not settings.LPORT,Cannot refactor,-1
option[4:10].lower() == 'lport ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:12].lower() == 'srvport ',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) == 0,not settings.LHOST,Cannot refactor,-1
option[4:12].lower() == 'uripath ',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'reverse_tcp',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == '?',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'quit',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'os_shell',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'back',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'os_shell',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'back',cannot be refactored by truth value test,Cannot refactor,-1
option.lower() == 'bind_tcp',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) != 0,cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) != 0,cannot be refactored by truth value test,Cannot refactor,-1
option[0:4].lower() == 'set ',4].lower().startswith('set'),Cannot refactor,-1
option[4:10].lower() == 'lhost ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:10].lower() == 'rhost ',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LPORT) == 0,not settings.LPORT,Cannot refactor,-1
option[4:10].lower() == 'lport ',cannot be refactored by truth value test,Cannot refactor,-1
option[4:12].lower() == 'srvport ',cannot be refactored by truth value test,Cannot refactor,-1
len(settings.LHOST) == 0,not settings.LHOST,Cannot refactor,-1
option[4:12].lower() == 'uripath ',cannot be refactored by truth value test,Cannot refactor,-1
self.input_type.ndim != 0,cannot be refactored by truth value test,self.input_type.ndim,0
next_minute != result.minute,cannot be refactored by truth value test,Cannot refactor,-1
next_hour != result.hour,cannot be refactored by truth value test,Cannot refactor,-1
now.fold == 0,cannot be refactored by truth value test,not now.fold,0
now.fold == 0,cannot be refactored by truth value test,Cannot refactor,-1
num_features % group_size == 0,not num_features % group_size,not num_features % group_size,1
order_placed_event.type == OrderEvents.PLACED,cannot be refactored by truth value test,Cannot refactor,-1
order_placed_event.user == checkout_user,cannot be refactored by truth value test,Cannot refactor,-1
payment_captured_event.type == OrderEvents.PAYMENT_AUTHORIZED,cannot be refactored by truth value test,Cannot refactor,-1
payment_captured_event.user == checkout_user,cannot be refactored by truth value test,Cannot refactor,-1
order_confirmed_event.type == OrderEvents.CONFIRMED,cannot be refactored by truth value test,Cannot refactor,-1
order_confirmed_event.user == checkout_user,cannot be refactored by truth value test,Cannot refactor,-1
order_confirmed_event.parameters == {},not order_confirmed_event.parameters,not order_confirmed_event.parameters,1
Cassette.hooks['before_record'] == [],not Cassette.hooks['before_record'],not Cassette.hooks['before_record'],1
Cassette.hooks['before_record'] != [],Cassette.hooks['before_record'],Cassette.hooks['before_record'],1
len(Cassette.hooks['before_record']) == 1,cannot be refactored by truth value test,Cannot refactor,-1
Cassette.hooks['before_record'] == [],not Cassette.hooks['before_record'],Cannot refactor,-1
Cassette.hooks['before_record'] != [],Cassette.hooks['before_record'],Cannot refactor,-1
len(Cassette.hooks['before_record']) == 1,cannot be refactored by truth value test,Cannot refactor,-1
n_observations == 0,not n_observations,not n_observations,1
node == None,not node,not node,1
len(metric_dependencies) == 0,not metric_dependencies,not metric_dependencies,1
metric_dependency.id == metric_configuration.id,cannot be refactored by truth value test,Cannot refactor,-1
len(result) == 0,not result,not result,1
len(trendchange_output) == 0,not trendchange_output,not trendchange_output,1
len(trendchange_output) == 0,not trendchange_output,Cannot refactor,-1
validate_tickets([]) == [],not validate_tickets([]),not validate_tickets([]),1
idx % 500000 == 0,not idx % 500000,not idx % 500000,1
idx % 500000 == 0,not idx % 500000,Cannot refactor,-1
len(q) == 3,cannot be refactored by truth value test,Cannot refactor,-1
q.pop() == 0,cannot be refactored by truth value test,not q.pop(),0
q.pop() == 1,cannot be refactored by truth value test,Cannot refactor,-1
q.pop() == 2,cannot be refactored by truth value test,Cannot refactor,-1
'empty queue' == str(excinfo.value),cannot be refactored by truth value test,Cannot refactor,-1
self.params['nbuckets'] == 0,not self.params['nbuckets'],not self.params['nbuckets'],1
symndx != 0,symndx,symndx,1
sym.name == name,cannot be refactored by truth value test,Cannot refactor,-1
self.params['nbuckets'] == 0,not self.params['nbuckets'],Cannot refactor,-1
symndx != 0,symndx,Cannot refactor,-1
sym.name == name,cannot be refactored by truth value test,Cannot refactor,-1
len(stack) == 0,cannot be refactored by truth value test,not stack,0
last != closing[char],cannot be refactored by truth value test,Cannot refactor,-1
updater.invalidupdater == True,not updater.invalidupdater,updater.invalidupdater,0
updater.update_ready != None,updater.update_ready is not None,updater.update_ready,0
updater.invalidupdater == True,not updater.invalidupdater,Cannot refactor,-1
updater.update_ready != None,updater.update_ready,Cannot refactor,-1
bbox.min == None,not bbox.min,not bbox.min,1
ow == min_length,cannot be refactored by truth value test,Cannot refactor,-1
oh % mult == 0,cannot be refactored by truth value test,not oh % mult,0
oh == min_length,cannot be refactored by truth value test,Cannot refactor,-1
ow % mult == 0,cannot be refactored by truth value test,not ow % mult,0
ow == min_length,cannot be refactored by truth value test,Cannot refactor,-1
oh % mult == 0,cannot be refactored by truth value test,Cannot refactor,-1
oh == min_length,cannot be refactored by truth value test,Cannot refactor,-1
ow % mult == 0,cannot be refactored by truth value test,Cannot refactor,-1
ow == min_length,cannot be refactored by truth value test,Cannot refactor,-1
oh % mult == 0,cannot be refactored by truth value test,Cannot refactor,-1
oh == min_length,cannot be refactored by truth value test,Cannot refactor,-1
ow % mult == 0,cannot be refactored by truth value test,Cannot refactor,-1
ow == min_length,cannot be refactored by truth value test,Cannot refactor,-1
oh % mult == 0,cannot be refactored by truth value test,Cannot refactor,-1
oh == min_length,cannot be refactored by truth value test,Cannot refactor,-1
ow % mult == 0,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
ret != 0,ret,ret,1
ret != 0,bool(ret),Cannot refactor,-1
response.status.code != 0,cannot be refactored by truth value test,response.status.code,0
len(ctx.raw_id_batch) == len(signed_blinded_hashed_ids),not ctx.raw_id_batch) - len(signed_blinded_hashed_ids,Cannot refactor,-1
form.errors == {},not form.errors,not form.errors,1
self._view.REGEX != {},self._view.REGEX,self._view.REGEX,1
self._view.REGEX != {},self._view.REGEX,Cannot refactor,-1
line.strip() == '',not line.strip(),Cannot refactor,-1
line.strip() == '',not line.strip(),Cannot refactor,-1
item_types[0] == int,cannot be refactored by truth value test,Cannot refactor,-1
len(doc2._.abbreviations) == 0,cannot be refactored by truth value test,not doc2._.abbreviations,0
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,not how,0
self.cursor.x == 0,not self.cursor.x,not self.cursor.x,1
self.cursor.y == 0,not self.cursor.y,not self.cursor.y,1
how == 0,not how,not how,1
how == 0,cannot be refactored by truth value test,not how,0
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
how == 1,cannot be refactored by truth value test,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
how == 0,not how,Cannot refactor,-1
self.cursor.x == 0,not self.cursor.x,Cannot refactor,-1
self.cursor.y == 0,not self.cursor.y,Cannot refactor,-1
how == 2,cannot be refactored by truth value test,Cannot refactor,-1
how == 3,cannot be refactored by truth value test,Cannot refactor,-1
't2' == got.task.name,cannot be refactored by truth value test,Cannot refactor,-1
[] == to_run,not to_run,not to_run,1
notary_pool_length == 1,cannot be refactored by truth value test,Cannot refactor,-1
notary_pool_length == 0,bool(notary_pool_length),not notary_pool_length,0
len(w3.eth.getTransactionReceipt(tx_hash)['logs']) == 0,cannot be refactored by truth value test,not w3.eth.getTransactionReceipt(tx_hash)['logs'],0
notary_pool_length == 1,cannot be refactored by truth value test,Cannot refactor,-1
notary_pool_length == 0,bool(notary_pool_length),Cannot refactor,-1
len(w3.eth.getTransactionReceipt(tx_hash)['logs']) == 0,cannot be refactored by truth value test,Cannot refactor,-1
"LicenceTextPart.de_list({}, client) == []","not LicenceTextPart.de_list({}, client)","not LicenceTextPart.de_list({}, client)",1
spaces[0] == '\n',cannot be refactored by truth value test,Cannot refactor,-1
srp() == '#',cannot be refactored by truth value test,Cannot refactor,-1
ch == ':',cannot be refactored by truth value test,Cannot refactor,-1
length == 0,not length,not length,1
srp() == '#',cannot be refactored by truth value test,Cannot refactor,-1
spaces[0] == '\n',cannot be refactored by truth value test,Cannot refactor,-1
ch == ':',cannot be refactored by truth value test,Cannot refactor,-1
ch == ':',cannot be refactored by truth value test,Cannot refactor,-1
srp() == '#',cannot be refactored by truth value test,Cannot refactor,-1
ch == ':',cannot be refactored by truth value test,Cannot refactor,-1
ch == '?',cannot be refactored by truth value test,Cannot refactor,-1
"self.scanner_processing_version != (1, 1)",cannot be refactored by truth value test,Cannot refactor,-1
ch == '?',cannot be refactored by truth value test,Cannot refactor,-1
"self.scanner_processing_version != (1, 1)",cannot be refactored by truth value test,Cannot refactor,-1
ch == ':',cannot be refactored by truth value test,Cannot refactor,-1
ch == ':',cannot be refactored by truth value test,Cannot refactor,-1
ch == ':',cannot be refactored by truth value test,Cannot refactor,-1
last_gamma == False,not last_gamma,not last_gamma,1
obj._room_join('!abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('!abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('!abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('!abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('#abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('#abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_create('abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_create('abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_create('#abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(response) == 0,not response,not response,1
len(response) == len(response_obj['joined_rooms']),cannot be refactored by truth value test,Cannot refactor,-1
len(response) == 0,not response,not response,1
obj._room_id('abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_id('abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_id('#abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('!abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('!abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('!abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('!abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('#abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(obj._room_cache) == 1,cannot be refactored by truth value test,Cannot refactor,-1
obj._room_join('#abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_create('abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_create('abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_create('#abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
len(response) == 0,not response,Cannot refactor,-1
len(response) == len(response_obj['joined_rooms']),cannot be refactored by truth value test,Cannot refactor,-1
len(response) == 0,not response,Cannot refactor,-1
obj._room_id('abc123') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_id('abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
obj._room_id('#abc123:localhost') == response_obj['room_id'],cannot be refactored by truth value test,Cannot refactor,-1
result.exit_code == 0,not result.exit_code,not result.exit_code,1
len(structure) != 6,cannot be refactored by truth value test,Cannot refactor,-1
classes != 0,classes,classes,1
mod_id == 4,cannot be refactored by truth value test,Cannot refactor,-1
mod_id == 3,cannot be refactored by truth value test,Cannot refactor,-1
mod_id == 5,cannot be refactored by truth value test,Cannot refactor,-1
block_id == 0,not block_id,not block_id,1
block_id == 0,not block_id,not block_id,1
mod_id == 2,cannot be refactored by truth value test,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
mod_id == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(structure) != 6,cannot be refactored by truth value test,Cannot refactor,-1
classes != 0,classes,Cannot refactor,-1
mod_id == 4,cannot be refactored by truth value test,Cannot refactor,-1
mod_id == 3,cannot be refactored by truth value test,Cannot refactor,-1
mod_id == 5,cannot be refactored by truth value test,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
mod_id == 2,cannot be refactored by truth value test,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
mod_id == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(structure) != 6,cannot be refactored by truth value test,Cannot refactor,-1
classes != 0,classes,Cannot refactor,-1
mod_id == 4,cannot be refactored by truth value test,Cannot refactor,-1
mod_id == 3,cannot be refactored by truth value test,Cannot refactor,-1
mod_id == 5,cannot be refactored by truth value test,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
mod_id == 2,cannot be refactored by truth value test,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
block_id == 0,not block_id,Cannot refactor,-1
mod_id == 2,cannot be refactored by truth value test,Cannot refactor,-1
level == 0,not level,not level,1
binary_color == True,binary_color,binary_color,1
level == 0,not level,not level,1
binary_color == True,binary_color,Cannot refactor,-1
len(text) == 0,not text,not text,1
len(text) == 0,not text,not text,1
len(text) == 0,not text,Cannot refactor,-1
len(text) == 0,not text,Cannot refactor,-1
len(subgraph_id2layers) != len(pattern_id2layers),cannot be refactored by truth value test,Cannot refactor,-1
layer.kernel != pattern_layer.kernel,cannot be refactored by truth value test,Cannot refactor,-1
out == False,not out,not out,1
len(subgraph_id2layers) == len(pattern_id2layers),not subgraph_id2layers) - len(pattern_id2layers,Cannot refactor,-1
self.epoch % self.opt.save_frequency == 0,not self.epoch % self.opt.save_frequency,not self.epoch % self.opt.save_frequency,1
exit_status == 0,not exit_status,not exit_status,1
self.max_user_applications == 1,cannot be refactored by truth value test,Cannot refactor,-1
self.max_user_applications == 1,cannot be refactored by truth value test,Cannot refactor,-1
localtime.hour == 0,cannot be refactored by truth value test,not localtime.hour,0
localtime.minute == 0,not localtime.minute,not localtime.minute,1
localtime.hour == 0,cannot be refactored by truth value test,Cannot refactor,-1
localtime.minute == 0,not localtime.minute,Cannot refactor,-1
self.max_user_applications == 1,cannot be refactored by truth value test,Cannot refactor,-1
self.max_user_applications == 1,cannot be refactored by truth value test,Cannot refactor,-1
localtime.hour == 0,cannot be refactored by truth value test,Cannot refactor,-1
localtime.minute == 0,not localtime.minute,Cannot refactor,-1
localtime.hour == 0,cannot be refactored by truth value test,Cannot refactor,-1
localtime.minute == 0,not localtime.minute,Cannot refactor,-1
vd.return_code == 0,not vd.return_code,not vd.return_code,1
vd.return_code == 0,not vd.return_code,not vd.return_code,1
vd.return_code == 0,not vd.return_code,Cannot refactor,-1
vd.return_code == 0,not vd.return_code,Cannot refactor,-1
vm == None,not vm,not vm,1
params.world_size == params.n_nodes * params.n_gpu_per_node,cannot be refactored by truth value test,Cannot refactor,-1
params.local_rank != -1,cannot be refactored by truth value test,Cannot refactor,-1
params.n_nodes == int(os.environ['N_NODES']),cannot be refactored by truth value test,Cannot refactor,-1
params.node_id == int(os.environ['NODE_RANK']),cannot be refactored by truth value test,Cannot refactor,-1
params.local_rank == -1,cannot be refactored by truth value test,Cannot refactor,-1
params.node_id == 0,not params.node_id,not params.node_id,1
params.local_rank == 0,not params.local_rank,not params.local_rank,1
params.world_size == params.n_nodes * params.n_gpu_per_node,cannot be refactored by truth value test,Cannot refactor,-1
params.local_rank != -1,cannot be refactored by truth value test,Cannot refactor,-1
params.n_nodes == int(os.environ['N_NODES']),cannot be refactored by truth value test,Cannot refactor,-1
params.node_id == int(os.environ['NODE_RANK']),cannot be refactored by truth value test,Cannot refactor,-1
params.local_rank == -1,cannot be refactored by truth value test,Cannot refactor,-1
params.node_id == 0,not params.node_id,Cannot refactor,-1
params.local_rank == 0,not params.local_rank,Cannot refactor,-1
change['new'] == 0,not change['new'],not change['new'],1
span.finish.call_count == 0,not span.finish.call_count,not span.finish.call_count,1
self.grid[row][column] == 0,not self.grid[row][column],not self.grid[row][column],1
self._relu_dim == 0,not self._relu_dim,not self._relu_dim,1
self._relu_dim == self._memory_dim,cannot be refactored by truth value test,Cannot refactor,-1
congress == None,not congress,not congress,1
bioguide != only_bioguide,cannot be refactored by truth value test,Cannot refactor,-1
chamber != read_file_chamber,cannot be refactored by truth value test,Cannot refactor,-1
chamber == 'sen',cannot be refactored by truth value test,Cannot refactor,-1
num_matches == 1,cannot be refactored by truth value test,Cannot refactor,-1
bioguide != only_bioguide,cannot be refactored by truth value test,Cannot refactor,-1
bioguide == icpsr_member[10],cannot be refactored by truth value test,Cannot refactor,-1
write_id == legislator['id']['icpsr'],cannot be refactored by truth value test,Cannot refactor,-1
write_id == '',not write_id,Cannot refactor,-1
state == 'GUAM',cannot be refactored by truth value test,Cannot refactor,-1
state == 'PUERTO',cannot be refactored by truth value test,Cannot refactor,-1
state == 'VIRGIN',cannot be refactored by truth value test,Cannot refactor,-1
state == 'DISTRIC',cannot be refactored by truth value test,Cannot refactor,-1
state == 'AMERICA',cannot be refactored by truth value test,Cannot refactor,-1
state == 'NORTHER',cannot be refactored by truth value test,Cannot refactor,-1
state == 'PHILIPP',cannot be refactored by truth value test,Cannot refactor,-1
write_id == legislator['id']['icpsr'],cannot be refactored by truth value test,Cannot refactor,-1
write_id == '',not write_id,Cannot refactor,-1
write_id != legislator['id']['icpsr'],cannot be refactored by truth value test,Cannot refactor,-1
write_id != '',write_id,Cannot refactor,-1
state == 'GUAM',cannot be refactored by truth value test,Cannot refactor,-1
state == 'PUERTO',cannot be refactored by truth value test,Cannot refactor,-1
state == 'VIRGIN',cannot be refactored by truth value test,Cannot refactor,-1
state == 'DISTRIC',cannot be refactored by truth value test,Cannot refactor,-1
state == 'AMERICA',cannot be refactored by truth value test,Cannot refactor,-1
state == 'NORTHER',cannot be refactored by truth value test,Cannot refactor,-1
state == 'PHILIPP',cannot be refactored by truth value test,Cannot refactor,-1
write_id != legislator['id']['icpsr'],cannot be refactored by truth value test,Cannot refactor,-1
write_id != '',write_id,Cannot refactor,-1
len(default_circuit.get_nets()) == 0,not default_circuit.get_nets(),not default_circuit.get_nets(),1
len(a) == 0,not a,not a,1
len(b) == 0,not b,not b,1
len(c) == 0,not c,not c,1
len(default_circuit.get_nets()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(a) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(b) == 0,not b,not b,1
len(c) == 0,not c,not c,1
len(default_circuit.get_nets()) == 0,not default_circuit.get_nets(),Cannot refactor,-1
len(a) == 0,not a,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(a) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 0,not default_circuit.get_nets(),Cannot refactor,-1
len(a) == 0,not a,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(a) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 0,not default_circuit.get_nets(),Cannot refactor,-1
len(a) == 0,not a,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(a) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 0,not default_circuit.get_nets(),Cannot refactor,-1
len(a) == 0,not a,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(a) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 0,not default_circuit.get_nets(),Cannot refactor,-1
len(a) == 0,not a,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
len(default_circuit.get_nets()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(a) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(b) == 0,not b,Cannot refactor,-1
len(c) == 0,not c,Cannot refactor,-1
set(sounding) == set(),not set(sounding),not set(sounding),1
set(sounding) == set(),not set(sounding),not set(sounding),1
set(sounding) == created,cannot be refactored by truth value test,Cannot refactor,-1
set(sounding) == set(),not set(sounding),Cannot refactor,-1
set(sounding) == set(),not set(sounding),Cannot refactor,-1
set(sounding) == created,cannot be refactored by truth value test,Cannot refactor,-1
thread_mock.call_count == 0,not thread_mock.call_count,not thread_mock.call_count,1
thread_mock.call_count == 0,not thread_mock.call_count,not thread_mock.call_count,1
thread_mock.call_count == 1,cannot be refactored by truth value test,Cannot refactor,-1
thread_mock.call_count == 0,not thread_mock.call_count,Cannot refactor,-1
thread_mock.call_count == 0,not thread_mock.call_count,Cannot refactor,-1
thread_mock.call_count == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(values) == 0,not values,not values,1
"len(self.master_kernel.network.prev_edge(edge, lane)) == 0","not self.master_kernel.network.prev_edge(edge, lane)","not self.master_kernel.network.prev_edge(edge, lane)",1
follower != '',follower,Cannot refactor,-1
num_pages == 0,not num_pages,not num_pages,1
result.exit_code == 0,not result.exit_code,not result.exit_code,1
response_data == [],not response_data,not response_data,1
"round(abs(15838.510668936022 - rmse), 7) == 0",cannot be refactored by truth value test,"not round(abs(15838.510668936022 - rmse), 7)",0
k == 0,not k,not k,1
"ss(i, i + l) != s",cannot be refactored by truth value test,Cannot refactor,-1
"ss(i, i + l) != s",cannot be refactored by truth value test,Cannot refactor,-1
load_uvarint(b'\x00') == 0,not load_uvarint(b'\x00'),not load_uvarint(b'\x00'),1
load_uvarint(b'\x01') == 1,cannot be refactored by truth value test,Cannot refactor,-1
load_uvarint(b'\xff\x01') == 255,cannot be refactored by truth value test,Cannot refactor,-1
load_uvarint(b'\xc0\xc4\x07') == 123456,cannot be refactored by truth value test,Cannot refactor,-1
load_uvarint(b'\x80\x80\x80\x80\x00') == 0,not load_uvarint(b'\x80\x80\x80\x80\x00'),not load_uvarint(b'\x80\x80\x80\x80\x00'),1
load_uvarint(b'\x00') == 0,not load_uvarint(b'\x00'),Cannot refactor,-1
load_uvarint(b'\x01') == 1,cannot be refactored by truth value test,Cannot refactor,-1
load_uvarint(b'\xff\x01') == 255,cannot be refactored by truth value test,Cannot refactor,-1
load_uvarint(b'\xc0\xc4\x07') == 123456,cannot be refactored by truth value test,Cannot refactor,-1
load_uvarint(b'\x80\x80\x80\x80\x00') == 0,not load_uvarint(b'\x80\x80\x80\x80\x00'),Cannot refactor,-1
basic_type == str,cannot be refactored by truth value test,Cannot refactor,-1
ALLOWED_FIELDS[key].type != bytes,ALLOWED_FIELDS[key].type,Cannot refactor,-1
basic_type == int,cannot be refactored by truth value test,Cannot refactor,-1
basic_type == str,cannot be refactored by truth value test,Cannot refactor,-1
ALLOWED_FIELDS[key].type != bytes,ALLOWED_FIELDS[key].type,Cannot refactor,-1
len(feature) == 0,not feature,not feature,1
basic_type == str,cannot be refactored by truth value test,Cannot refactor,-1
ALLOWED_FIELDS[key].type != bytes,ALLOWED_FIELDS[key].type,Cannot refactor,-1
basic_type == float,cannot be refactored by truth value test,Cannot refactor,-1
ALLOWED_FIELDS[key].type != bytes,ALLOWED_FIELDS[key].type,Cannot refactor,-1
0 == trial_1_1.count_past_trials(session),cannot be refactored by truth value test,not trial_1_1.count_past_trials(session),0
1 == trial_1_2.count_past_trials(session),cannot be refactored by truth value test,Cannot refactor,-1
0 == trial_2_1.count_past_trials(session),cannot be refactored by truth value test,not trial_2_1.count_past_trials(session),0
0 == trial_1_1.count_past_trials(session),cannot be refactored by truth value test,Cannot refactor,-1
1 == trial_1_2.count_past_trials(session),cannot be refactored by truth value test,Cannot refactor,-1
0 == trial_2_1.count_past_trials(session),cannot be refactored by truth value test,Cannot refactor,-1
offset == None,not offset,not offset,1
len(info) != 0,cannot be refactored by truth value test,info,0
num_remaining == 0,not num_remaining,not num_remaining,1
len(buffer_per_group[group_id]) == self.batch_size,cannot be refactored by truth value test,Cannot refactor,-1
len(buffer_per_group[group_id]) == self.batch_size,cannot be refactored by truth value test,Cannot refactor,-1
num_remaining == 0,not num_remaining,not num_remaining,1
num_remaining == 0,not num_remaining,Cannot refactor,-1
len(buffer_per_group[group_id]) == self.batch_size,cannot be refactored by truth value test,Cannot refactor,-1
len(buffer_per_group[group_id]) == self.batch_size,cannot be refactored by truth value test,Cannot refactor,-1
num_remaining == 0,not num_remaining,Cannot refactor,-1
int((lsdd_perms > lsdd_unpermed).sum()) == 0,cannot be refactored by truth value test,not int((lsdd_perms > lsdd_unpermed).sum()),0
"H_lam_inv.shape == (n_kcs, n_kcs)",cannot be refactored by truth value test,Cannot refactor,-1
len(continuous_cols) + len(categorical_cols) == 0,not continuous_cols) + len(categorical_cols,not len(continuous_cols) + len(categorical_cols),0
sink(5) == 0,cannot be refactored by truth value test,not sink(5),0
sink(10) == 0,cannot be refactored by truth value test,not sink(10),0
sink(5) == 0,cannot be refactored by truth value test,Cannot refactor,-1
sink(10) == 0,cannot be refactored by truth value test,Cannot refactor,-1
artist_type == 'similar',cannot be refactored by truth value test,Cannot refactor,-1
total_mbid_count == 0,not total_mbid_count,not total_mbid_count,1
artist_type == 'top',cannot be refactored by truth value test,Cannot refactor,-1
parse_duration('PT3459.520S') == 3459.52,cannot be refactored by truth value test,Cannot refactor,-1
parse_duration('PT2.00S') == 2.0,cannot be refactored by truth value test,Cannot refactor,-1
parse_duration('PT1H0M30.000S') == 3630.0,cannot be refactored by truth value test,Cannot refactor,-1
parse_duration('P1Y1M1DT1H0M30.000S') == 34218030.0,cannot be refactored by truth value test,Cannot refactor,-1
parse_duration('mMWroNG') == 0,not parse_duration('mMWroNG'),not parse_duration('mMWroNG'),1
__name__ == '__main__',cannot be refactored by truth value test,Cannot refactor,-1
iter % 10 == 0,not iter % 10,not iter % 10,1
"count_documents(mongo_c, spec) == 0",cannot be refactored by truth value test,"not count_documents(mongo_c, spec)",0
"count_documents(monty_c, spec) == count_documents(mongo_c, spec)",cannot be refactored by truth value test,Cannot refactor,-1
args.dist_url == 'env://',//'),Cannot refactor,-1
args.rank == -1,cannot be refactored by truth value test,Cannot refactor,-1
args.rank % ngpus_per_node == 0,not args.rank % ngpus_per_node,not args.rank % ngpus_per_node,1
args.dist_url == 'env://',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == -1,cannot be refactored by truth value test,Cannot refactor,-1
args.rank % ngpus_per_node == 0,not args.rank % ngpus_per_node,Cannot refactor,-1
args.rank % ngpus_per_node == 0,not args.rank % ngpus_per_node,Cannot refactor,-1
num == 0,not num,not num,1
len(tables_dict) % 1000 == 0,cannot be refactored by truth value test,not len(tables_dict) % 1000,0
len(gpl) == 0,not gpl,not gpl,1
len(vpLineSets[1]) != 1,cannot be refactored by truth value test,Cannot refactor,-1
upAxisIndex == vp1AxisIndex,cannot be refactored by truth value test,Cannot refactor,-1
vpAxisIndices[0] == vpAxisIndices[1],cannot be refactored by truth value test,Cannot refactor,-1
len(vpLineSets[1]) != 1,cannot be refactored by truth value test,Cannot refactor,-1
scn.optical_center_type == 'camdata',cannot be refactored by truth value test,Cannot refactor,-1
f == None,not f,not f,1
scn.optical_center_type == 'compute',cannot be refactored by truth value test,Cannot refactor,-1
len(gpl) == 0,not gpl,Cannot refactor,-1
len(vpLineSets[1]) != 1,cannot be refactored by truth value test,Cannot refactor,-1
upAxisIndex == vp1AxisIndex,cannot be refactored by truth value test,Cannot refactor,-1
vpAxisIndices[0] == vpAxisIndices[1],cannot be refactored by truth value test,Cannot refactor,-1
len(vpLineSets[1]) != 1,cannot be refactored by truth value test,Cannot refactor,-1
scn.optical_center_type == 'camdata',cannot be refactored by truth value test,Cannot refactor,-1
f == None,not f,Cannot refactor,-1
scn.optical_center_type == 'compute',cannot be refactored by truth value test,Cannot refactor,-1
"view.substr(sublime.Region(view.size() - 2, view.size())) == '\n\n'",cannot be refactored by truth value test,Cannot refactor,-1
len(output) == 0,not output,not output,1
"view.substr(sublime.Region(view.size() - 2, view.size())) == '\n\n'",cannot be refactored by truth value test,Cannot refactor,-1
name[0] == '^',cannot be refactored by truth value test,Cannot refactor,-1
n == 0,not n,not n,1
name[0] == '^',cannot be refactored by truth value test,Cannot refactor,-1
n == 1,cannot be refactored by truth value test,Cannot refactor,-1
link == unique_links[name],cannot be refactored by truth value test,Cannot refactor,-1
"view.substr(sublime.Region(view.size() - 2, view.size())) == '\n\n'",cannot be refactored by truth value test,Cannot refactor,-1
len(output) == 0,not output,Cannot refactor,-1
"view.substr(sublime.Region(view.size() - 2, view.size())) == '\n\n'",cannot be refactored by truth value test,Cannot refactor,-1
name[0] == '^',cannot be refactored by truth value test,Cannot refactor,-1
n == 0,not n,Cannot refactor,-1
name[0] == '^',cannot be refactored by truth value test,Cannot refactor,-1
n == 1,cannot be refactored by truth value test,Cannot refactor,-1
link == unique_links[name],cannot be refactored by truth value test,Cannot refactor,-1
2 == mesh.dxf.version,cannot be refactored by truth value test,Cannot refactor,-1
0 == mesh.dxf.blend_crease,not mesh.dxf.blend_crease,not mesh.dxf.blend_crease,1
3 == mesh.dxf.subdivision_levels,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 0,not w,not w,1
header['BLAH BLAH'] == 'TESTA',cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 0,not w,not w,1
len(w) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(header) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(header) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(header) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 3,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 3,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 4,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 4,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 5,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 0,not w,Cannot refactor,-1
header['BLAH BLAH'] == 'TESTA',cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 0,not w,Cannot refactor,-1
len(w) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(header) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(header) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(header) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 3,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 3,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 4,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 4,cannot be refactored by truth value test,Cannot refactor,-1
len(w) == 5,cannot be refactored by truth value test,Cannot refactor,-1
keys == self.get_keys(),cannot be refactored by truth value test,Cannot refactor,-1
len(self.get_keys()) == 0,not self.get_keys(),not self.get_keys(),1
keys == self.get_keys(),cannot be refactored by truth value test,Cannot refactor,-1
len(self.get_keys()) == 0,not self.get_keys(),Cannot refactor,-1
len(self.frame_queue.frames) == 0,not self.frame_queue.frames,not self.frame_queue.frames,1
len(self.frame_queue.frames) == 0,not self.frame_queue.frames,Cannot refactor,-1
result.returncode == 0,not result.returncode,not result.returncode,1
args.model == 'spm',cannot be refactored by truth value test,Cannot refactor,-1
args.model == 'subword_nmt',cannot be refactored by truth value test,Cannot refactor,-1
args.model == 'yttm',cannot be refactored by truth value test,Cannot refactor,-1
args.model == 'hf_bytebpe',cannot be refactored by truth value test,Cannot refactor,-1
(i + 1) % 100 == 0,cannot be refactored by truth value test,not (i + 1) % 100,0
args.model == 'hf_bytebpe',cannot be refactored by truth value test,Cannot refactor,-1
args.model == 'hf_bytebpe',cannot be refactored by truth value test,Cannot refactor,-1
args.model == 'hf_wordpiece',cannot be refactored by truth value test,Cannot refactor,-1
args.model == 'hf_bpe',cannot be refactored by truth value test,Cannot refactor,-1
self['uniform_size'].value == 0,not self['uniform_size'].value,not self['uniform_size'].value,1
rc == 0,not rc,not rc,1
torch.distributed.get_rank() == 0,not torch.distributed.get_rank(),not torch.distributed.get_rank(),1
i % shrink != 0,cannot be refactored by truth value test,i % shrink,0
i % shrink != 0,cannot be refactored by truth value test,Cannot refactor,-1
self.epd_init() != 0,self.epd_init(),self.epd_init(),1
search == None,not search,not search,1
img == self.current,cannot be refactored by truth value test,Cannot refactor,-1
img == self.current,cannot be refactored by truth value test,Cannot refactor,-1
len(self.used) == 0,not self.used,not self.used,1
self.used[0] != img,cannot be refactored by truth value test,Cannot refactor,-1
len(self.used) == 0,not self.used,Cannot refactor,-1
self.used[0] != img,cannot be refactored by truth value test,Cannot refactor,-1
image_source.get_source_type() == meta['sourceType'],cannot be refactored by truth value test,Cannot refactor,-1
"deepdiff.DeepDiff(expected_names, response.json()['projects'], ignore_order=True) == {}",cannot be refactored by truth value test,"not deepdiff.DeepDiff(expected_names, response.json()['projects'], ignore_order=True)",0
offset != 0,offset,offset,1
tmp == 0,not tmp,not tmp,1
datetime_to_seconds(DT_0) == 0,cannot be refactored by truth value test,not datetime_to_seconds(DT_0),0
datetime_to_seconds(DT) == 1542333064,cannot be refactored by truth value test,Cannot refactor,-1
size == 0,not size,not size,1
"feat.shape == torch.Size([32, 2048, 1, 2, 2])",cannot be refactored by truth value test,Cannot refactor,-1
len(loss_aux) == 1,cannot be refactored by truth value test,Cannot refactor,-1
"feat.shape == torch.Size([32, 2048, 1, 2, 2])",cannot be refactored by truth value test,Cannot refactor,-1
len(loss_aux) == 1,cannot be refactored by truth value test,Cannot refactor,-1
"feat.shape == torch.Size([32, 2048, 1, 2, 2])",cannot be refactored by truth value test,Cannot refactor,-1
len(loss_aux) == 0,not loss_aux,not loss_aux,1
"feat.shape == torch.Size([32, 2048, 1, 2, 2])",cannot be refactored by truth value test,Cannot refactor,-1
len(loss_aux) == 0,not loss_aux,not loss_aux,1
"feat.shape == torch.Size([32, 2048, 1, 2, 2])",cannot be refactored by truth value test,Cannot refactor,-1
len(loss_aux) == 1,cannot be refactored by truth value test,Cannot refactor,-1
"feat.shape == torch.Size([32, 2048, 1, 2, 2])",cannot be refactored by truth value test,Cannot refactor,-1
len(loss_aux) == 1,cannot be refactored by truth value test,Cannot refactor,-1
"feat.shape == torch.Size([32, 2048, 1, 2, 2])",cannot be refactored by truth value test,Cannot refactor,-1
len(loss_aux) == 0,not loss_aux,Cannot refactor,-1
"feat.shape == torch.Size([32, 2048, 1, 2, 2])",cannot be refactored by truth value test,Cannot refactor,-1
len(loss_aux) == 0,not loss_aux,Cannot refactor,-1
cost_matrix.size == 0,cannot be refactored by truth value test,not cost_matrix.size,0
val == 'responseobject',cannot be refactored by truth value test,Cannot refactor,-1
self.client._send_group_aware_request.call_args[0][0] == 'testgroup',cannot be refactored by truth value test,Cannot refactor,-1
req['group_id'] == 'testgroup',cannot be refactored by truth value test,Cannot refactor,-1
req['group_generation_id'] == -1,cannot be refactored by truth value test,Cannot refactor,-1
req['member_id'] == '',not req['member_id'],Cannot refactor,-1
req['retention_time'] == -1,cannot be refactored by truth value test,Cannot refactor,-1
len(req['topics']) == 1,cannot be refactored by truth value test,Cannot refactor,-1
req['topics'][0]['topic'] == 'topic1',cannot be refactored by truth value test,Cannot refactor,-1
len(req['topics'][0]['partitions']) == 2,cannot be refactored by truth value test,Cannot refactor,-1
req['topics'][0]['partitions'][0]['partition'] == 0,not req['topics'][0]['partitions'][0]['partition'],not req['topics'][0]['partitions'][0]['partition'],1
req['topics'][0]['partitions'][0]['offset'] == 2342,cannot be refactored by truth value test,Cannot refactor,-1
req['topics'][0]['partitions'][1]['partition'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
req['topics'][0]['partitions'][1]['offset'] == 8793,cannot be refactored by truth value test,Cannot refactor,-1
len(kernel_sizes) == 0,not kernel_sizes,not kernel_sizes,1
n_output % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(kernel_sizes) == 0,not kernel_sizes,Cannot refactor,-1
n_output % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
axis != 0,axis,axis,1
axis != 0,axis,Cannot refactor,-1
sub_stage == 0,not sub_stage,not sub_stage,1
axis != 0,axis,Cannot refactor,-1
axis != 0,axis,Cannot refactor,-1
sub_stage == 0,not sub_stage,Cannot refactor,-1
axis != 0,axis,Cannot refactor,-1
axis != 0,axis,Cannot refactor,-1
sub_stage == 0,not sub_stage,Cannot refactor,-1
obj == None,not obj,not obj,1
obj.library == None,not obj.library,not obj.library,1
obj.proxy != None,obj.proxy,obj.proxy,1
obj == None,not obj,Cannot refactor,-1
obj.library == None,not obj.library,Cannot refactor,-1
obj.proxy != None,obj.proxy is not None,Cannot refactor,-1
c.proxy != None,c.proxy,c.proxy,1
obj == None,not obj,Cannot refactor,-1
obj.library == None,not obj.library,Cannot refactor,-1
obj.proxy != None,obj.proxy is not None,Cannot refactor,-1
obj == None,not obj,Cannot refactor,-1
obj.library == None,not obj.library,Cannot refactor,-1
obj.proxy != None,obj.proxy is not None,Cannot refactor,-1
c.proxy != None,c.proxy is not None,Cannot refactor,-1
obj == None,not obj,Cannot refactor,-1
obj.library == None,not obj.library,Cannot refactor,-1
obj.proxy != None,obj.proxy is not None,Cannot refactor,-1
obj == None,not obj,Cannot refactor,-1
obj.library == None,not obj.library,Cannot refactor,-1
obj.proxy != None,obj.proxy,Cannot refactor,-1
c.proxy != None,c.proxy is not None,Cannot refactor,-1
obj == None,not obj,Cannot refactor,-1
obj.library == None,not obj.library,Cannot refactor,-1
obj.proxy != None,obj.proxy,Cannot refactor,-1
obj == None,not obj,Cannot refactor,-1
obj.library == None,not obj.library,Cannot refactor,-1
obj.proxy != None,obj.proxy,Cannot refactor,-1
c.proxy != None,c.proxy is not None,Cannot refactor,-1
target.numel() == 0,cannot be refactored by truth value test,not target.numel(),0
len(state) == 0,not state,not state,1
result == {},not result,not result,1
errcode == 0,not errcode,not errcode,1
tolerance == 0,not tolerance,not tolerance,1
tolerance == 0,not tolerance,Cannot refactor,-1
len(ancestors) == 0,not ancestors,not ancestors,1
len(ancestors) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(group) == 0,not group,not group,1
len(group) == 1,cannot be refactored by truth value test,Cannot refactor,-1
paddle.distributed.get_rank() == 0,not paddle.distributed.get_rank(),not paddle.distributed.get_rank(),1
batch_id % debug_steps == 0,not batch_id % debug_steps,not batch_id % debug_steps,1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,not (batch_id + 1) % accum_iter,0
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,not (batch_id + 1) % accum_iter,0
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
paddle.distributed.get_rank() == 0,not paddle.distributed.get_rank(),Cannot refactor,-1
batch_id % debug_steps == 0,not batch_id % debug_steps,not batch_id % debug_steps,1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
paddle.distributed.get_rank() == 0,not paddle.distributed.get_rank(),Cannot refactor,-1
batch_id % debug_steps == 0,not batch_id % debug_steps,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
paddle.distributed.get_rank() == 0,not paddle.distributed.get_rank(),Cannot refactor,-1
batch_id % debug_steps == 0,not batch_id % debug_steps,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
paddle.distributed.get_rank() == 0,not paddle.distributed.get_rank(),Cannot refactor,-1
batch_id % debug_steps == 0,not batch_id % debug_steps,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
paddle.distributed.get_rank() == 0,not paddle.distributed.get_rank(),Cannot refactor,-1
batch_id % debug_steps == 0,not batch_id % debug_steps,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
paddle.distributed.get_rank() == 0,not paddle.distributed.get_rank(),Cannot refactor,-1
batch_id % debug_steps == 0,not batch_id % debug_steps,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
paddle.distributed.get_rank() == 0,not paddle.distributed.get_rank(),Cannot refactor,-1
batch_id % debug_steps == 0,not batch_id % debug_steps,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
(batch_id + 1) % accum_iter == 0,cannot be refactored by truth value test,Cannot refactor,-1
batch_id + 1 == len(dataloader),cannot be refactored by truth value test,Cannot refactor,-1
iouType == 'segm',cannot be refactored by truth value test,Cannot refactor,-1
iouType == 'bbox',cannot be refactored by truth value test,Cannot refactor,-1
ap == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(s[s > -1]) == 0,cannot be refactored by truth value test,not s[s > -1],0
iouType == 'segm',cannot be refactored by truth value test,Cannot refactor,-1
iouType == 'bbox',cannot be refactored by truth value test,Cannot refactor,-1
iouType == 'keypoints',cannot be refactored by truth value test,Cannot refactor,-1
ap == 1,cannot be refactored by truth value test,Cannot refactor,-1
ap == 1,cannot be refactored by truth value test,Cannot refactor,-1
ap == 1,cannot be refactored by truth value test,Cannot refactor,-1
rc != 0,rc,rc,1
val == 0,not val,not val,1
len(results) == 0,not results,not results,1
delete_mock.call_count == 0,not delete_mock.call_count,not delete_mock.call_count,1
self.k == 0,not self.k,not self.k,1
cur == 0,not cur,not cur,1
self.k == 0,not self.k,Cannot refactor,-1
cur == 0,not cur,Cannot refactor,-1
response.status_code == 400,cannot be refactored by truth value test,Cannot refactor,-1
response.data['detail']['code'] == 'parameter-validation-error',cannot be refactored by truth value test,Cannot refactor,-1
0 == Deploy.objects.count(),not Deploy.objects.count(),not Deploy.objects.count(),1
len(gt_boxes) == 0,not gt_boxes,Cannot refactor,-1
result.exit_code == 0,not result.exit_code,not result.exit_code,1
file_path != None,file_path is not None,file_path,0
os.path.isdir(local) == True,cannot be refactored by truth value test,os.path.isdir(local),0
error != None,error is not None,error,0
self._backup_current == True,self._backup_current,self._backup_current,1
self._engine.token != None,self._engine.token is not None,self._engine.token,0
self._engine.name == 'gitlab',cannot be refactored by truth value test,Cannot refactor,-1
os.path.isdir(local) == True,os.path.isdir(local),Cannot refactor,-1
error != None,error is not None,Cannot refactor,-1
self._backup_current == True,self._backup_current,Cannot refactor,-1
self._engine.token != None,self._engine.token is not None,Cannot refactor,-1
self._engine.name == 'gitlab',cannot be refactored by truth value test,Cannot refactor,-1
os.path.isdir(local) == True,cannot be refactored by truth value test,Cannot refactor,-1
error != None,error is not None,Cannot refactor,-1
self._backup_current == True,not self._backup_current,Cannot refactor,-1
self._engine.token != None,self._engine.token is not None,Cannot refactor,-1
self._engine.name == 'gitlab',cannot be refactored by truth value test,Cannot refactor,-1
os.path.isdir(local) == True,os.path.isdir(local),Cannot refactor,-1
error != None,error is not None,Cannot refactor,-1
self._backup_current == True,not self._backup_current,Cannot refactor,-1
self._engine.token != None,self._engine.token is not None,Cannot refactor,-1
self._engine.name == 'gitlab',cannot be refactored by truth value test,Cannot refactor,-1
len(self.request._resume_points) == 0,not self.request._resume_points,not self.request._resume_points,1
response.status_code == 302,cannot be refactored by truth value test,Cannot refactor,-1
response.url == '/test/view',cannot be refactored by truth value test,Cannot refactor,-1
self._yield_batch_num % 32 == 0,not self._yield_batch_num % 32,not self._yield_batch_num % 32,1
proc.returncode == 0,not proc.returncode,not proc.returncode,1
(options.get(action.dest) or {}).get('initial_value') != None,"options.get(action.dest, {}).get('initial_value')",(options.get(action.dest) or {}).get('initial_value'),0
default == argparse.SUPPRESS,not default,Cannot refactor,-1
len(sorted_tags) == 0,not sorted_tags,not sorted_tags,1
commit_id == tag_commit,cannot be refactored by truth value test,Cannot refactor,-1
commit_count == 0,not commit_count,not commit_count,1
len(sorted_tags) == 0,not sorted_tags,Cannot refactor,-1
commit_id == tag_commit,cannot be refactored by truth value test,Cannot refactor,-1
commit_count == 0,not commit_count,Cannot refactor,-1
self._force_non_inc_step == False,self._force_non_inc_step,not self._force_non_inc_step,0
r != None,r is not None,r,0
r.status_code == 200,cannot be refactored by truth value test,Cannot refactor,-1
r != None,r is not None,r,0
r.status_code == 200,cannot be refactored by truth value test,Cannot refactor,-1
norm_hyp[n] != 0,norm_hyp[n],norm_hyp[n],1
norm_ref[n] != 0,norm_ref[n],norm_ref[n],1
norm_hyp[n] != 0,norm_hyp[n],Cannot refactor,-1
norm_ref[n] != 0,norm_ref[n],Cannot refactor,-1
norm_hyp[n] != 0,norm_hyp[n],Cannot refactor,-1
norm_ref[n] != 0,norm_ref[n],Cannot refactor,-1
norm_hyp[n] != 0,norm_hyp[n],Cannot refactor,-1
norm_ref[n] != 0,norm_ref[n],Cannot refactor,-1
len(unmatched_detections) == 0,not unmatched_detections,not unmatched_detections,1
len(track_indices_l) == 0,not track_indices_l,not track_indices_l,1
len(unmatched_detections) == 0,not unmatched_detections,Cannot refactor,-1
len(track_indices_l) == 0,not track_indices_l,Cannot refactor,-1
len(history) == 4,cannot be refactored by truth value test,Cannot refactor,-1
history[0].created_datetime.year == 2018,cannot be refactored by truth value test,Cannot refactor,-1
"history[1].command == '/bin/sh -c #(nop)  CMD [""sh""]'",cannot be refactored by truth value test,Cannot refactor,-1
history[2].command == 'sh',cannot be refactored by truth value test,Cannot refactor,-1
config.labels == {},not config.labels,not config.labels,1
v1_compat['id'] == 'somev1id',cannot be refactored by truth value test,Cannot refactor,-1
v1_compat['parent'] == 'someparentid',cannot be refactored by truth value test,Cannot refactor,-1
index == 3,cannot be refactored by truth value test,Cannot refactor,-1
v1_compat['container_config'] == config._parsed['container_config'],cannot be refactored by truth value test,Cannot refactor,-1
v1_compat['container_config']['Cmd'] == [history_entry.command],cannot be refactored by truth value test,Cannot refactor,-1
ellipses == 0,cannot be refactored by truth value test,not ellipses,0
name == '...',cannot be refactored by truth value test,Cannot refactor,-1
skip_part_num == 0,not skip_part_num,not skip_part_num,1
skipped_command_context.arg_index == 0,cannot be refactored by truth value test,not skipped_command_context.arg_index,0
skip_part_num == 0,not skip_part_num,Cannot refactor,-1
skipped_command_context.arg_index == 0,cannot be refactored by truth value test,Cannot refactor,-1
tensor.ndim == 0,not tensor.ndim,not tensor.ndim,1
document_accepted_model != False,document_accepted_model,document_accepted_model,1
document_accepted_model == document_accepted_model2,cannot be refactored by truth value test,Cannot refactor,-1
document_accepted_model_json2 == document_accepted_model_json,cannot be refactored by truth value test,Cannot refactor,-1
self.dim % self.n_heads != 0,cannot be refactored by truth value test,self.dim % self.n_heads,0
bool(b) == False,not bool(b),not b,0
int(i) == 0,not int(i),not int(i),1
float(f) == 0.0,not float(f),not float(f),1
operator.index(i) == 0,not operator.index(i),not operator.index(i),1
bool(b) == False,not bool(b),Cannot refactor,-1
int(i) == 0,not int(i),Cannot refactor,-1
float(f) == 0.0,not float(f),Cannot refactor,-1
operator.index(i) == 0,not operator.index(i),Cannot refactor,-1
bool(b) == False,not bool(b),Cannot refactor,-1
int(i) == 0,not int(i),Cannot refactor,-1
float(f) == 0.0,not float(f),Cannot refactor,-1
operator.index(i) == 0,not operator.index(i),Cannot refactor,-1
bool(b) == False,not bool(b),Cannot refactor,-1
int(i) == 0,not int(i),Cannot refactor,-1
float(f) == 0.0,not float(f),Cannot refactor,-1
operator.index(i) == 0,not operator.index(i),Cannot refactor,-1
current_value == 0,not current_value,not current_value,1
resp.status_code == 200,cannot be refactored by truth value test,Cannot refactor,-1
resp.data['count'] == 1,cannot be refactored by truth value test,Cannot refactor,-1
resp.status_code == 200,cannot be refactored by truth value test,Cannot refactor,-1
resp.data['count'] == 0,not resp.data['count'],not resp.data['count'],1
i == 0,not i,Cannot refactor,-1
language != tokenization.convert_to_unicode(self.language),cannot be refactored by truth value test,Cannot refactor,-1
key != (),bool(key),key,0
level == 0,not level,Cannot refactor,-1
"self.rpc.getreceivedbyaddress(addr, 0) != 0","self.rpc.getreceivedbyaddress(addr, 0)","self.rpc.getreceivedbyaddress(addr, 0)",1
audio_metrics_model != False,audio_metrics_model,audio_metrics_model,1
audio_metrics_model == audio_metrics_model2,cannot be refactored by truth value test,Cannot refactor,-1
audio_metrics_model_json2 == audio_metrics_model_json,cannot be refactored by truth value test,Cannot refactor,-1
len(matrix[i]) == 0,not matrix[i],not matrix[i],1
strComp_authkey == strDic,cannot be refactored by truth value test,Cannot refactor,-1
i == 14,cannot be refactored by truth value test,Cannot refactor,-1
dim != 0,dim,dim,1
w1 == None,not w1,not w1,1
w2 == None,not w2,not w2,1
w1.solid != w2.solid,cannot be refactored by truth value test,Cannot refactor,-1
w1 == None,not w1,Cannot refactor,-1
w2 == None,not w2,Cannot refactor,-1
w1 == None,not w1,Cannot refactor,-1
w2 == None,not w2,Cannot refactor,-1
w1.solid != w2.solid,cannot be refactored by truth value test,Cannot refactor,-1
w1 == None,not w1,Cannot refactor,-1
w2 == None,not w2,Cannot refactor,-1
k == '@id',cannot be refactored by truth value test,Cannot refactor,-1
len(frame['@id']) == 0,not frame['@id'],not frame['@id'],1
k == '@type',cannot be refactored by truth value test,Cannot refactor,-1
len(frame['@id']) == 0,not frame['@id'],Cannot refactor,-1
len(frame['@type']) == 1,not frame['@type'],Cannot refactor,-1
len(frame['@type']) == 1,cannot be refactored by truth value test,Cannot refactor,-1
location_count == 0,not location_count,not location_count,1
cnt == num_masks,cannot be refactored by truth value test,Cannot refactor,-1
cnt_node == max_node_unroll,cannot be refactored by truth value test,Cannot refactor,-1
cnt_edge == num_mask_edge,cannot be refactored by truth value test,Cannot refactor,-1
cnt == num_mask_edge,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
j == 0,not j,not j,1
cnt == num_masks,cannot be refactored by truth value test,Cannot refactor,-1
cnt_node == max_node_unroll,cannot be refactored by truth value test,Cannot refactor,-1
cnt_edge == num_mask_edge,cannot be refactored by truth value test,Cannot refactor,-1
cnt == num_mask_edge,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
j == 0,not j,Cannot refactor,-1
len(res) == 1,cannot be refactored by truth value test,Cannot refactor,-1
"res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')",cannot be refactored by truth value test,Cannot refactor,-1
"res[0]._hosts == ['testhost1', 'testhost2']",cannot be refactored by truth value test,Cannot refactor,-1
res[0]._args == {},not res[0]._args,not res[0]._args,1
res[0]._vars == {},not res[0]._vars,not res[0]._vars,1
len(res) == 1,cannot be refactored by truth value test,Cannot refactor,-1
"res[0]._filename == os.path.join(os.getcwd(), 'include_test.yml')",cannot be refactored by truth value test,Cannot refactor,-1
"res[0]._hosts == ['testhost1', 'testhost2']",cannot be refactored by truth value test,Cannot refactor,-1
res[0]._args == {},not res[0]._args,Cannot refactor,-1
res[0]._vars == {},not res[0]._vars,Cannot refactor,-1
chromosome.get_fitness_functions() == [],not chromosome.get_fitness_functions(),not chromosome.get_fitness_functions(),1
len(formats) == 1,cannot be refactored by truth value test,Cannot refactor,-1
ctx['complete_frags_downloaded_bytes'] == 0,not ctx['complete_frags_downloaded_bytes'],not ctx['complete_frags_downloaded_bytes'],1
len(formats) == 1,cannot be refactored by truth value test,Cannot refactor,-1
box_type == b'mdat',cannot be refactored by truth value test,Cannot refactor,-1
err.code == 404,cannot be refactored by truth value test,Cannot refactor,-1
err.code == 410,cannot be refactored by truth value test,Cannot refactor,-1
err.code == 404,cannot be refactored by truth value test,Cannot refactor,-1
err.code == 410,cannot be refactored by truth value test,Cannot refactor,-1
err.code == 404,cannot be refactored by truth value test,Cannot refactor,-1
err.code == 410,cannot be refactored by truth value test,Cannot refactor,-1
mock_tools.shutil.unpack_archive.call_count == 0,cannot be refactored by truth value test,not mock_tools.shutil.unpack_archive.call_count,0
i % args.print_freq == 0,not i % args.print_freq,not i % args.print_freq,1
rownum == 0,not rownum,not rownum,1
rownum == 0,not rownum,Cannot refactor,-1
num_categories == 0,not num_categories,not num_categories,1
rownum == 0,not rownum,Cannot refactor,-1
rownum == 0,not rownum,Cannot refactor,-1
num_categories == 0,not num_categories,Cannot refactor,-1
excinfo.value.code == 0,not excinfo.value.code,not excinfo.value.code,1
output == f'{__version__}\n',cannot be refactored by truth value test,Cannot refactor,-1
len(dummy_field.errors) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(dummy_field.errors) == 0,not dummy_field.errors,not dummy_field.errors,1
self.nesting_level == 0,not self.nesting_level,not self.nesting_level,1
addon.weekly_downloads == 0,not addon.weekly_downloads,not addon.weekly_downloads,1
addon.weekly_downloads == count,cannot be refactored by truth value test,Cannot refactor,-1
mins == 0,not mins,not mins,1
mins == 0,not mins,Cannot refactor,-1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),not Lock.held_with_prefix(''),1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),not Lock.held_with_prefix('mylock'),1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),not Lock.held_with_prefix(''),1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),not Lock.held_with_prefix('mylock'),1
Lock.held_with_prefix('') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock-beta') == {},not Lock.held_with_prefix('mylock-beta'),not Lock.held_with_prefix('mylock-beta'),1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),Cannot refactor,-1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),Cannot refactor,-1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),Cannot refactor,-1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),Cannot refactor,-1
Lock.held_with_prefix('') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock-beta') == {},not Lock.held_with_prefix('mylock-beta'),Cannot refactor,-1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),Cannot refactor,-1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),Cannot refactor,-1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),Cannot refactor,-1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),Cannot refactor,-1
Lock.held_with_prefix('') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock-beta') == {},not Lock.held_with_prefix('mylock-beta'),Cannot refactor,-1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),Cannot refactor,-1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),Cannot refactor,-1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),Cannot refactor,-1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),Cannot refactor,-1
Lock.held_with_prefix('') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock-beta') == {},not Lock.held_with_prefix('mylock-beta'),Cannot refactor,-1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),Cannot refactor,-1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),Cannot refactor,-1
Lock.held_with_prefix('') == {},not Lock.held_with_prefix(''),Cannot refactor,-1
Lock.held_with_prefix('mylock') == {},not Lock.held_with_prefix('mylock'),Cannot refactor,-1
Lock.held_with_prefix('') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock') == {'mylock-alpha': lock.holding_connection_id()},cannot be refactored by truth value test,Cannot refactor,-1
Lock.held_with_prefix('mylock-beta') == {},not Lock.held_with_prefix('mylock-beta'),Cannot refactor,-1
bboxes.shape[-1] % 4 == 0,not bboxes.shape[-1] % 4,not bboxes.shape[-1] % 4,1
self.log % 20 == 0,cannot be refactored by truth value test,not self.log % 20,0
tp.shape[0] == 1,cannot be refactored by truth value test,Cannot refactor,-1
tp[0] == 1,cannot be refactored by truth value test,Cannot refactor,-1
fp[0] == 0,not fp[0],not fp[0],1
tp.shape[0] == 1,cannot be refactored by truth value test,Cannot refactor,-1
tp[0] == 0,cannot be refactored by truth value test,not tp[0],0
fp[0] == 1,cannot be refactored by truth value test,Cannot refactor,-1
tp.shape[0] == 1,cannot be refactored by truth value test,Cannot refactor,-1
tp[0] == 1,cannot be refactored by truth value test,Cannot refactor,-1
fp[0] == 0,not fp[0],Cannot refactor,-1
tp.shape[0] == 1,cannot be refactored by truth value test,Cannot refactor,-1
tp[0] == 0,not tp[0],Cannot refactor,-1
fp[0] == 1,cannot be refactored by truth value test,Cannot refactor,-1
add_result.exit_code == 0,not add_result.exit_code,not add_result.exit_code,1
add_result.exit_code == 0,not add_result.exit_code,not add_result.exit_code,1
add_result.exit_code == 0,not add_result.exit_code,Cannot refactor,-1
add_result.exit_code == 0,not add_result.exit_code,Cannot refactor,-1
levelJsonTree == None,not levelJsonTree,not levelJsonTree,1
musicJsonTree == None,not musicJsonTree,not musicJsonTree,1
soundJsonTree == None,not soundJsonTree,not soundJsonTree,1
pictureJsonTree == None,not pictureJsonTree,not pictureJsonTree,1
animJsonTree == None,not animJsonTree,not animJsonTree,1
charasetJsonTree == None,not charasetJsonTree,not charasetJsonTree,1
levelJsonTree == None,not levelJsonTree,Cannot refactor,-1
musicJsonTree == None,not musicJsonTree,Cannot refactor,-1
soundJsonTree == None,not soundJsonTree,Cannot refactor,-1
pictureJsonTree == None,not pictureJsonTree,Cannot refactor,-1
animJsonTree == None,not animJsonTree,Cannot refactor,-1
charasetJsonTree == None,not charasetJsonTree,Cannot refactor,-1
levelJsonTree == None,not levelJsonTree,Cannot refactor,-1
musicJsonTree == None,not musicJsonTree,Cannot refactor,-1
soundJsonTree == None,not soundJsonTree,Cannot refactor,-1
pictureJsonTree == None,not pictureJsonTree,Cannot refactor,-1
animJsonTree == None,not animJsonTree,Cannot refactor,-1
charasetJsonTree == None,not charasetJsonTree,Cannot refactor,-1
levelJsonTree == None,not levelJsonTree,Cannot refactor,-1
musicJsonTree == None,not musicJsonTree,Cannot refactor,-1
soundJsonTree == None,not soundJsonTree,Cannot refactor,-1
pictureJsonTree == None,not pictureJsonTree,Cannot refactor,-1
animJsonTree == None,not animJsonTree,Cannot refactor,-1
charasetJsonTree == None,not charasetJsonTree,Cannot refactor,-1
levelJsonTree == None,not levelJsonTree,Cannot refactor,-1
musicJsonTree == None,not musicJsonTree,Cannot refactor,-1
soundJsonTree == None,not soundJsonTree,Cannot refactor,-1
pictureJsonTree == None,not pictureJsonTree,Cannot refactor,-1
animJsonTree == None,not animJsonTree,Cannot refactor,-1
charasetJsonTree == None,not charasetJsonTree,Cannot refactor,-1
levelJsonTree == None,not levelJsonTree,Cannot refactor,-1
musicJsonTree == None,not musicJsonTree,Cannot refactor,-1
soundJsonTree == None,not soundJsonTree,Cannot refactor,-1
pictureJsonTree == None,not pictureJsonTree,Cannot refactor,-1
animJsonTree == None,not animJsonTree,Cannot refactor,-1
charasetJsonTree == None,not charasetJsonTree,Cannot refactor,-1
model.group.rank() == model.group.size() - 1,cannot be refactored by truth value test,Cannot refactor,-1
model.group.rank() == 0,not model.group.rank(),not model.group.rank(),1
height == 0,not height,Cannot refactor,-1
ready.value == 0,not ready.value,not ready.value,1
ready.value == 0,not ready.value,Cannot refactor,-1
step % self.D_update_ratio == 0,not step % self.D_update_ratio,not step % self.D_update_ratio,1
self.opt['train']['gan_type'] == 'gan',cannot be refactored by truth value test,Cannot refactor,-1
step % self.D_update_ratio == 0,not step % self.D_update_ratio,not step % self.D_update_ratio,1
self.train_opt['gaussian_scale'] != None,self.train_opt['gaussian_scale'],Cannot refactor,-1
step % self.D_update_ratio == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.opt['train']['gan_type'] == 'ragan',cannot be refactored by truth value test,Cannot refactor,-1
step % self.D_update_ratio == 0,not step % self.D_update_ratio,Cannot refactor,-1
step % self.D_update_ratio == 0,not step % self.D_update_ratio,Cannot refactor,-1
self.opt['train']['gan_type'] == 'gan',cannot be refactored by truth value test,Cannot refactor,-1
step % self.D_update_ratio == 0,not step % self.D_update_ratio,Cannot refactor,-1
self.train_opt['gaussian_scale'] != None,self.train_opt['gaussian_scale'],Cannot refactor,-1
step % self.D_update_ratio == 0,cannot be refactored by truth value test,Cannot refactor,-1
self.opt['train']['gan_type'] == 'ragan',cannot be refactored by truth value test,Cannot refactor,-1
step % self.D_update_ratio == 0,not step % self.D_update_ratio,Cannot refactor,-1
"ignored.get('extra_vars', {}) == {}","not ignored.get('extra_vars', {})","not ignored.get('extra_vars', {})",1
len(parts) % 2 == 0,cannot be refactored by truth value test,not len(parts) % 2,0
len(parts) % 2 == 0,cannot be refactored by truth value test,Cannot refactor,-1
params[0] == b'2',cannot be refactored by truth value test,Cannot refactor,-1
coef.ndim == 0,cannot be refactored by truth value test,not coef.ndim,0
coef.ndim == 0,cannot be refactored by truth value test,Cannot refactor,-1
n % 2 == 0,not n % 2,not n % 2,1
result.exit_code == 0,not result.exit_code,not result.exit_code,1
signum == 0,not signum,not signum,1
signum == signal.SIGKILL,cannot be refactored by truth value test,Cannot refactor,-1
len(x_shape) == 4,cannot be refactored by truth value test,Cannot refactor,-1
interp_method == 'nearest',cannot be refactored by truth value test,Cannot refactor,-1
interp_method == 'bilinear',cannot be refactored by truth value test,Cannot refactor,-1
len(infer_shape(size)) == 0,cannot be refactored by truth value test,not infer_shape(size),0
align_mode == 0,not align_mode,not align_mode,1
interp_method == 'bicubic',cannot be refactored by truth value test,Cannot refactor,-1
align_mode == 0,not align_mode,Cannot refactor,-1
len(x_shape) == 4,cannot be refactored by truth value test,Cannot refactor,-1
interp_method == 'nearest',cannot be refactored by truth value test,Cannot refactor,-1
interp_method == 'bilinear',cannot be refactored by truth value test,Cannot refactor,-1
len(infer_shape(size)) == 0,cannot be refactored by truth value test,Cannot refactor,-1
align_mode == 0,not align_mode,Cannot refactor,-1
interp_method == 'bicubic',cannot be refactored by truth value test,Cannot refactor,-1
align_mode == 0,not align_mode,Cannot refactor,-1
length == 0,not length,not length,1
indices_val == 1,cannot be refactored by truth value test,Cannot refactor,-1
indices_val == 0,not indices_val,not indices_val,1
id == 0,not id,not id,1
content_warehouse['id'] == warehouse_id,cannot be refactored by truth value test,Cannot refactor,-1
total_count == 0,not total_count,not total_count,1
ds.BitsAllocated == 16,cannot be refactored by truth value test,Cannot refactor,-1
ds.SamplesPerPixel == 3,cannot be refactored by truth value test,Cannot refactor,-1
ds.PixelRepresentation == 0,not ds.PixelRepresentation,not ds.PixelRepresentation,1
id(arr) != id(ref),cannot be refactored by truth value test,Cannot refactor,-1
arr.dtype == '>u2',cannot be refactored by truth value test,Cannot refactor,-1
len(chkpt_values) == numCheckpoints,cannot be refactored by truth value test,Cannot refactor,-1
int(self.t) % print_interval == 0,not int(self.t) % print_interval,not int(self.t) % print_interval,1
len(chkpt_values) == numCheckpoints,cannot be refactored by truth value test,Cannot refactor,-1
int(self.t) % print_interval == 0,not int(self.t) % print_interval,Cannot refactor,-1
verbose == 't',cannot be refactored by truth value test,Cannot refactor,-1
verbose == True,verbose,verbose,1
int(self.t) % 10 != 0,int(self.t) % 10,int(self.t) % 10,1
int(self.t) % 10 != 0,int(self.t) % 10,Cannot refactor,-1
len(chkpt_values) == numCheckpoints,cannot be refactored by truth value test,Cannot refactor,-1
int(self.t) % print_interval == 0,not int(self.t) % print_interval,Cannot refactor,-1
len(chkpt_values) == numCheckpoints,cannot be refactored by truth value test,Cannot refactor,-1
int(self.t) % print_interval == 0,not int(self.t) % print_interval,Cannot refactor,-1
verbose == 't',cannot be refactored by truth value test,Cannot refactor,-1
verbose == True,verbose,Cannot refactor,-1
int(self.t) % 10 != 0,int(self.t) % 10,Cannot refactor,-1
int(self.t) % 10 != 0,int(self.t) % 10,Cannot refactor,-1
len(chkpt_values) == numCheckpoints,cannot be refactored by truth value test,Cannot refactor,-1
int(self.t) % print_interval == 0,not int(self.t) % print_interval,Cannot refactor,-1
len(chkpt_values) == numCheckpoints,cannot be refactored by truth value test,Cannot refactor,-1
int(self.t) % print_interval == 0,not int(self.t) % print_interval,Cannot refactor,-1
verbose == 't',cannot be refactored by truth value test,Cannot refactor,-1
verbose == True,verbose,Cannot refactor,-1
int(self.t) % 10 != 0,int(self.t) % 10,Cannot refactor,-1
int(self.t) % 10 != 0,int(self.t) % 10,Cannot refactor,-1
len(drives_to_add.intersection(candidate_drives)) != 0,cannot be refactored by truth value test,drives_to_add.intersection(candidate_drives),0
lower_percentile == 0,not lower_percentile,not lower_percentile,1
environment == 'eqnarray',cannot be refactored by truth value test,Cannot refactor,-1
environment == 'IEEEeqnarray',cannot be refactored by truth value test,Cannot refactor,-1
term_count == terms_per_line,cannot be refactored by truth value test,Cannot refactor,-1
term.as_ordered_factors()[0] == -1,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
environment == 'align*',cannot be refactored by truth value test,Cannot refactor,-1
sign == '+',cannot be refactored by truth value test,Cannot refactor,-1
hvd.rank() == 0,not hvd.rank(),not hvd.rank(),1
batch % 10 == 0,not batch % 10,not batch % 10,1
hvd.rank() == 0,not hvd.rank(),not hvd.rank(),1
batch % 10 == 0,not batch % 10,Cannot refactor,-1
hvd.rank() == 0,not hvd.rank(),Cannot refactor,-1
hvd.rank() == 0,not hvd.rank(),Cannot refactor,-1
batch % 10 == 0,not batch % 10,Cannot refactor,-1
hvd.rank() == 0,not hvd.rank(),Cannot refactor,-1
batch % 10 == 0,not batch % 10,Cannot refactor,-1
hvd.rank() == 0,not hvd.rank(),Cannot refactor,-1
hvd.rank() == 0,not hvd.rank(),Cannot refactor,-1
batch % 10 == 0,not batch % 10,Cannot refactor,-1
hvd.rank() == 0,not hvd.rank(),Cannot refactor,-1
batch % 10 == 0,not batch % 10,Cannot refactor,-1
hvd.rank() == 0,not hvd.rank(),Cannot refactor,-1
len(first) == 1,cannot be refactored by truth value test,Cannot refactor,-1
first[0] == 0,cannot be refactored by truth value test,not first[0],0
len(second) == 1,cannot be refactored by truth value test,Cannot refactor,-1
second[0] == 0,not second[0],not second[0],1
len(first) == 1,cannot be refactored by truth value test,Cannot refactor,-1
first[0] == 0,cannot be refactored by truth value test,Cannot refactor,-1
len(second) == 1,cannot be refactored by truth value test,Cannot refactor,-1
second[0] == 0,not second[0],Cannot refactor,-1
len(episodes_found) == 0,not episodes_found,not episodes_found,1
Config['order'] == 'dvd',cannot be refactored by truth value test,Cannot refactor,-1
"os.getenv('TVNAMER_TEST_MODE', '0') == '1'",cannot be refactored by truth value test,Cannot refactor,-1
fake_authorizer.called == True,not fake_authorizer.called,fake_authorizer.called,0
len(self.terminals) == 0,not self.terminals,not self.terminals,1
len(self.terminals) == 1,cannot be refactored by truth value test,Cannot refactor,-1
num_faces == 0,not num_faces,not num_faces,1
(name in self.__buffer) == False,cannot be refactored by truth value test,not name in self.__buffer,0
(vtype.__tars_class__ in t) == False,cannot be refactored by truth value test,not vtype.__tars_class__ in t,0
(name in self.__buffer) == False,cannot be refactored by truth value test,Cannot refactor,-1
(vtype.__tars_class__ in t) == False,cannot be refactored by truth value test,Cannot refactor,-1
E[0] != 0,E[0],E[0],1
J[0] != 0,J[0],J[0],1
E[0] != 0,E[0],Cannot refactor,-1
J[0] != 0,J[0],Cannot refactor,-1
return_data.size == 0,cannot be refactored by truth value test,not return_data.size,0
global_state.environment.active_account.code.instruction_list != [],global_state.environment.active_account.code.instruction_list,global_state.environment.active_account.code.instruction_list,1
return_data.size == 0,cannot be refactored by truth value test,Cannot refactor,-1
return_data.size == 0,cannot be refactored by truth value test,Cannot refactor,-1
global_state.environment.active_account.code.instruction_list != [],global_state.environment.active_account.code.instruction_list,Cannot refactor,-1
return_data.size == 0,cannot be refactored by truth value test,Cannot refactor,-1
buffer.idx == batch_size_,cannot be refactored by truth value test,Cannot refactor,-1
buffer.idx == 0,not buffer.idx,not buffer.idx,1
buffer.idx == 11,cannot be refactored by truth value test,Cannot refactor,-1
"_hook_types(str(cfg), None) == []","not _hook_types(str(cfg), None)","not _hook_types(str(cfg), None)",1
i == 0,not i,Cannot refactor,-1
x == 'M',cannot be refactored by truth value test,Cannot refactor,-1
mydoc.embed._get_changed_fields() == ['db_name'],cannot be refactored by truth value test,Cannot refactor,-1
mydoc._get_changed_fields() == ['db_embed.db_name'],not mydoc._get_changed_fields() or mydoc._get_changed_fields()[0] != 'db_embed.db_name',Cannot refactor,-1
embed._get_changed_fields() == ['db_name'],cannot be refactored by truth value test,Cannot refactor,-1
mydoc._get_changed_fields() == ['db_embed'],cannot be refactored by truth value test,Cannot refactor,-1
mydoc._get_changed_fields() == [],not mydoc._get_changed_fields(),not mydoc._get_changed_fields(),1
page_handler == 'course_handler',cannot be refactored by truth value test,Cannot refactor,-1
len(alert_nodes) == 0,not alert_nodes,not alert_nodes,1
page_handler == 'course_handler',cannot be refactored by truth value test,Cannot refactor,-1
quality_size_min != 0,quality_size_min,quality_size_min,1
quality_size_max != 0,quality_size_max,quality_size_max,1
best_result.quality == cur_result.quality,cannot be refactored by truth value test,Cannot refactor,-1
quality_size_min != 0,quality_size_min,Cannot refactor,-1
quality_size_max != 0,quality_size_max,Cannot refactor,-1
quality_size_min != 0,quality_size_min,Cannot refactor,-1
quality_size_max != 0,quality_size_max,Cannot refactor,-1
best_result.quality == cur_result.quality,cannot be refactored by truth value test,Cannot refactor,-1
quality_size_min != 0,quality_size_min,Cannot refactor,-1
quality_size_max != 0,quality_size_max,Cannot refactor,-1
len(header) == 0,not header,not header,1
s[0] != 'File',cannot be refactored by truth value test,Cannot refactor,-1
self.average_count == 0,not self.average_count,not self.average_count,1
self.average_count == 0,not self.average_count,not self.average_count,1
self.average_count == 0,not self.average_count,Cannot refactor,-1
self.average_count == 0,not self.average_count,Cannot refactor,-1
self.average_count == 0,not self.average_count,Cannot refactor,-1
self.average_count == 0,not self.average_count,Cannot refactor,-1
self.average_count == 0,not self.average_count,Cannot refactor,-1
self.average_count == 0,not self.average_count,Cannot refactor,-1
len(encoder_out['encoder_out']) == 0,not encoder_out['encoder_out'],not encoder_out['encoder_out'],1
len(encoder_out['encoder_padding_mask']) == 0,not encoder_out['encoder_padding_mask'],not encoder_out['encoder_padding_mask'],1
len(encoder_out['encoder_embedding']) == 0,not encoder_out['encoder_embedding'],not encoder_out['encoder_embedding'],1
len(encoder_out['src_tokens']) == 0,not encoder_out['src_tokens'],not encoder_out['src_tokens'],1
len(encoder_out['src_lengths']) == 0,not encoder_out['src_lengths'],not encoder_out['src_lengths'],1
len(encoder_out['encoder_out']) == 0,not encoder_out['encoder_out'],Cannot refactor,-1
len(encoder_out['encoder_padding_mask']) == 0,not encoder_out['encoder_padding_mask'],Cannot refactor,-1
len(encoder_out['encoder_embedding']) == 0,not encoder_out['encoder_embedding'],Cannot refactor,-1
len(encoder_out['src_tokens']) == 0,not encoder_out['src_tokens'],Cannot refactor,-1
len(encoder_out['src_lengths']) == 0,not encoder_out['src_lengths'],Cannot refactor,-1
len(encoder_out['encoder_out']) == 0,not encoder_out['encoder_out'],Cannot refactor,-1
len(encoder_out['encoder_padding_mask']) == 0,not encoder_out['encoder_padding_mask'],Cannot refactor,-1
len(encoder_out['encoder_embedding']) == 0,not encoder_out['encoder_embedding'],Cannot refactor,-1
len(encoder_out['src_tokens']) == 0,not encoder_out['src_tokens'],Cannot refactor,-1
len(encoder_out['src_lengths']) == 0,not encoder_out['src_lengths'],Cannot refactor,-1
len(encoder_out['encoder_out']) == 0,not encoder_out['encoder_out'],Cannot refactor,-1
len(encoder_out['encoder_padding_mask']) == 0,not encoder_out['encoder_padding_mask'],Cannot refactor,-1
len(encoder_out['encoder_embedding']) == 0,not encoder_out['encoder_embedding'],Cannot refactor,-1
len(encoder_out['src_tokens']) == 0,not encoder_out['src_tokens'],Cannot refactor,-1
len(encoder_out['src_lengths']) == 0,not encoder_out['src_lengths'],Cannot refactor,-1
len(encoder_out['encoder_out']) == 0,not encoder_out['encoder_out'],Cannot refactor,-1
len(encoder_out['encoder_padding_mask']) == 0,not encoder_out['encoder_padding_mask'],Cannot refactor,-1
len(encoder_out['encoder_embedding']) == 0,not encoder_out['encoder_embedding'],Cannot refactor,-1
len(encoder_out['src_tokens']) == 0,not encoder_out['src_tokens'],Cannot refactor,-1
len(encoder_out['src_lengths']) == 0,not encoder_out['src_lengths'],Cannot refactor,-1
len(xdata) == 0,not xdata,not xdata,1
len(tagwriter.tags) == 0,not tagwriter.tags,not tagwriter.tags,1
len(xdata) == 0,not xdata,Cannot refactor,-1
len(tagwriter.tags) == 0,not tagwriter.tags,Cannot refactor,-1
len(s.nodes) == 0,not s.nodes,not s.nodes,1
len(s.relationships) == 0,not s.relationships,not s.relationships,1
len(s.nodes) == 0,not s.nodes,Cannot refactor,-1
len(s.relationships) == 0,not s.relationships,Cannot refactor,-1
color != None,color is not None,color,0
all != None,all,all,1
detailed != None,detailed is not None,detailed,0
cfg_only != None,cfg_only,cfg_only,1
count_of_findings != None,count_of_findings is not None,count_of_findings,0
multiprocessing != None,multiprocessing,multiprocessing,1
color != None,color is not None,Cannot refactor,-1
color == None,not color,not color,1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,not all,1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,not detailed,1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,not cfg_only,1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,not count_of_findings,1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,not multiprocessing,1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,bool(color),Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only is not None,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only is not None,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only is not None,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only is not None,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
all != None,all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
color != None,color is not None,Cannot refactor,-1
color == None,not color,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
all != None,all,Cannot refactor,-1
all == None,not all,Cannot refactor,-1
detailed != None,detailed is not None,Cannot refactor,-1
detailed == None,not detailed,Cannot refactor,-1
cfg_only != None,cfg_only,Cannot refactor,-1
cfg_only == None,not cfg_only,Cannot refactor,-1
count_of_findings != None,count_of_findings is not None,Cannot refactor,-1
count_of_findings == None,not count_of_findings,Cannot refactor,-1
multiprocessing != None,multiprocessing,Cannot refactor,-1
len(badbytes) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
multiprocessing == None,not multiprocessing,Cannot refactor,-1
function_param.name == param.name,cannot be refactored by truth value test,Cannot refactor,-1
i != 0,i,i,1
i == index,cannot be refactored by truth value test,Cannot refactor,-1
class_param.name == param.name,cannot be refactored by truth value test,Cannot refactor,-1
i != 0,i,i,1
i == index,cannot be refactored by truth value test,Cannot refactor,-1
function_param.name == param.name,cannot be refactored by truth value test,Cannot refactor,-1
i != 0,i,Cannot refactor,-1
i == index,cannot be refactored by truth value test,Cannot refactor,-1
class_param.name == param.name,cannot be refactored by truth value test,Cannot refactor,-1
i != 0,i,Cannot refactor,-1
i == index,cannot be refactored by truth value test,Cannot refactor,-1
len(self.terminals) == 0,not self.terminals,not self.terminals,1
len(self.terminals) == 1,cannot be refactored by truth value test,Cannot refactor,-1
ret['retcode'] == 0,not ret['retcode'],not ret['retcode'],1
name.split('.')[0] == HOSTNAME.split('.')[0],cannot be refactored by truth value test,Cannot refactor,-1
pending_process.returncode == 0,not pending_process.returncode,not pending_process.returncode,1
len(outcome_learners) == 0,not outcome_learners,not outcome_learners,1
len(outcome_learners) == 0,not outcome_learners,not outcome_learners,1
len(effect_learners) == 0,not effect_learners,not effect_learners,1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(effect_learners) == 0,not effect_learners,Cannot refactor,-1
len(effect_learners) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(effect_learners) == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(effect_learners) == 0,not effect_learners,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(effect_learners) == 0,not effect_learners,Cannot refactor,-1
len(effect_learners) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(effect_learners) == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(effect_learners) == 0,not effect_learners,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(effect_learners) == 0,not effect_learners,Cannot refactor,-1
len(effect_learners) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(outcome_learners) == 0,not outcome_learners,Cannot refactor,-1
len(outcome_learners) == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(effect_learners) == 2,cannot be refactored by truth value test,Cannot refactor,-1
diag_gates == [],not diag_gates,not diag_gates,1
diag_gates_static == [],not diag_gates_static,not diag_gates_static,1
diag_gates == [],not diag_gates,Cannot refactor,-1
diag_gates_static == [],not diag_gates_static,Cannot refactor,-1
pairing != 'minimal',cannot be refactored by truth value test,Cannot refactor,-1
pairing != 'minimal',cannot be refactored by truth value test,Cannot refactor,-1
pairing != 'minimal',cannot be refactored by truth value test,Cannot refactor,-1
len(p) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
pairing == 'nearest',cannot be refactored by truth value test,Cannot refactor,-1
len(p) == len(z),cannot be refactored by truth value test,Cannot refactor,-1
np.isreal(p).sum() == 0,cannot be refactored by truth value test,not np.isreal(p).sum(),0
len(p) % 2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
pairing == 'nearest',cannot be refactored by truth value test,Cannot refactor,-1
np.isreal(p).sum() == 0,cannot be refactored by truth value test,Cannot refactor,-1
pairing != 'minimal',cannot be refactored by truth value test,Cannot refactor,-1
len(p) + 1 == len(z),cannot be refactored by truth value test,Cannot refactor,-1
np.isreal(p).sum() == 1,cannot be refactored by truth value test,Cannot refactor,-1
np.isreal(z).sum() == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(p) + 1 == len(z),cannot be refactored by truth value test,Cannot refactor,-1
np.isreal(p).sum() == 1,cannot be refactored by truth value test,Cannot refactor,-1
np.isreal(z).sum() == 1,cannot be refactored by truth value test,Cannot refactor,-1
config.hidden_size % config.num_attention_heads != 0,cannot be refactored by truth value test,config.hidden_size % config.num_attention_heads,0
config.hidden_size % config.num_attention_heads == 0,not config.hidden_size % config.num_attention_heads,not config.hidden_size % config.num_attention_heads,1
config.hidden_size % config.num_attention_heads != 0,cannot be refactored by truth value test,Cannot refactor,-1
config.hidden_size % config.num_attention_heads == 0,not config.hidden_size % config.num_attention_heads,Cannot refactor,-1
np.floor(sched.lod) != np.floor(prev_lod),cannot be refactored by truth value test,Cannot refactor,-1
np.ceil(sched.lod) != np.ceil(prev_lod),cannot be refactored by truth value test,Cannot refactor,-1
cur_tick % image_snapshot_ticks == 0,not cur_tick % image_snapshot_ticks,not cur_tick % image_snapshot_ticks,1
cur_tick % network_snapshot_ticks == 0,not cur_tick % network_snapshot_ticks,not cur_tick % network_snapshot_ticks,1
gpu == 0,not gpu,Cannot refactor,-1
gpu == 0,not gpu,Cannot refactor,-1
np.floor(sched.lod) != np.floor(prev_lod),cannot be refactored by truth value test,Cannot refactor,-1
np.ceil(sched.lod) != np.ceil(prev_lod),cannot be refactored by truth value test,Cannot refactor,-1
cur_tick % image_snapshot_ticks == 0,not cur_tick % image_snapshot_ticks,Cannot refactor,-1
cur_tick % network_snapshot_ticks == 0,not cur_tick % network_snapshot_ticks,Cannot refactor,-1
np.floor(sched.lod) != np.floor(prev_lod),cannot be refactored by truth value test,Cannot refactor,-1
np.ceil(sched.lod) != np.ceil(prev_lod),cannot be refactored by truth value test,Cannot refactor,-1
cur_tick % image_snapshot_ticks == 0,not cur_tick % image_snapshot_ticks,Cannot refactor,-1
cur_tick % network_snapshot_ticks == 0,not cur_tick % network_snapshot_ticks,Cannot refactor,-1
gpu == 0,not gpu,Cannot refactor,-1
gpu == 0,not gpu,Cannot refactor,-1
np.floor(sched.lod) != np.floor(prev_lod),cannot be refactored by truth value test,Cannot refactor,-1
np.ceil(sched.lod) != np.ceil(prev_lod),cannot be refactored by truth value test,Cannot refactor,-1
cur_tick % image_snapshot_ticks == 0,not cur_tick % image_snapshot_ticks,Cannot refactor,-1
cur_tick % network_snapshot_ticks == 0,not cur_tick % network_snapshot_ticks,Cannot refactor,-1
result.returncode == 1,cannot be refactored by truth value test,Cannot refactor,-1
result.returncode == 0,not result.returncode,not result.returncode,1
resp[0] == 32,cannot be refactored by truth value test,Cannot refactor,-1
resp[1] == 2,cannot be refactored by truth value test,Cannot refactor,-1
resp[3] != 0,resp[3],resp[3],1
resp[0] == 32,cannot be refactored by truth value test,Cannot refactor,-1
resp[1] == 2,cannot be refactored by truth value test,Cannot refactor,-1
len(X) != len(function_values),cannot be refactored by truth value test,Cannot refactor,-1
len(X) % popsize != 0,cannot be refactored by truth value test,len(X) % popsize,0
args.rank == 0,not args.rank,not args.rank,1
"missing_keys == ['fc.weight', 'fc.bias']",cannot be refactored by truth value test,Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,not unexpected_keys,1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,not args.rank,1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,not args.rank,1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
step % args.print_freq == 0,cannot be refactored by truth value test,not step % args.print_freq,0
args.rank == 0,not args.rank,not args.rank,1
len(pg) == 2,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']",cannot be refactored by truth value test,Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
step % args.print_freq == 0,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
len(pg) == 2,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
step % args.print_freq == 0,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
len(pg) == 2,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
step % args.print_freq == 0,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
len(pg) == 2,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
step % args.print_freq == 0,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
len(pg) == 2,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
"missing_keys == ['fc.weight', 'fc.bias']","not missing_keys.symmetric_difference(['fc.weight', 'fc.bias'])",Cannot refactor,-1
unexpected_keys == [],not unexpected_keys,Cannot refactor,-1
args.weights == 'finetune',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
args.weights == 'freeze',cannot be refactored by truth value test,Cannot refactor,-1
step % args.print_freq == 0,cannot be refactored by truth value test,Cannot refactor,-1
args.rank == 0,not args.rank,Cannot refactor,-1
len(pg) == 2,cannot be refactored by truth value test,Cannot refactor,-1
mean.imag != 0,mean.imag,mean.imag,1
var.imag != 0,var.imag,var.imag,1
mean.imag != 0,mean.imag,Cannot refactor,-1
var.imag != 0,var.imag,Cannot refactor,-1
mean.imag != 0,mean.imag,Cannot refactor,-1
var.imag != 0,var.imag,Cannot refactor,-1
mean.imag != 0,mean.imag,Cannot refactor,-1
var.imag != 0,var.imag,Cannot refactor,-1
len(result) == 0,not result,not result,1
dash_duo.get_logs() == [],not dash_duo.get_logs(),not dash_duo.get_logs(),1
k == 0,not k,not k,1
currentCharFrequency != -1,cannot be refactored by truth value test,Cannot refactor,-1
step == 0,not step,not step,1
A.x != A.y,cannot be refactored by truth value test,Cannot refactor,-1
A.y != A.z,cannot be refactored by truth value test,Cannot refactor,-1
A.z != A.x,cannot be refactored by truth value test,Cannot refactor,-1
A.x + 0 == A.x,not A.x,Cannot refactor,-1
"dot(v1, A.x) == x",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v1, A.y) == y",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v1, A.z) == z",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v2, A.x) == x ** 2",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v2, A.y) == y ** 2",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v2, A.z) == z ** 2",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v3, A.x) == x ** 2 + x",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v3, A.y) == y ** 2 + y",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v3, A.z) == z ** 2 + z",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v4, A.x) == x - x ** 2",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v4, A.y) == y - y ** 2",cannot be refactored by truth value test,Cannot refactor,-1
"dot(v4, A.z) == z - z ** 2",cannot be refactored by truth value test,Cannot refactor,-1
"v1.to_matrix(A) == Matrix([[x], [y], [z]])",cannot be refactored by truth value test,Cannot refactor,-1
"v1.to_matrix(B) == Matrix([[x], [y * cos(q) + z * sin(q)], [-y * sin(q) + z * cos(q)]])",cannot be refactored by truth value test,Cannot refactor,-1
Vector(0).separate() == {},not Vector(0).separate(),not Vector(0).separate(),1
v1.separate() == {A: v1},cannot be refactored by truth value test,Cannot refactor,-1
"v5.separate() == {A: x * A.x + y * A.y, B: z * B.z}",cannot be refactored by truth value test,Cannot refactor,-1
"v6.free_symbols(A) == {x, y, z}",cannot be refactored by truth value test,Cannot refactor,-1
i % 10 == 0,not i % 10,not i % 10,1
length == 0,not length,not length,1
remainder != 0,cannot be refactored by truth value test,remainder,0
length == 0,not length,Cannot refactor,-1
remainder != 0,cannot be refactored by truth value test,Cannot refactor,-1
duplicate_dict['ukbench09268.jpg'] == [],not duplicate_dict['ukbench09268.jpg'],not duplicate_dict['ukbench09268.jpg'],1
"duplicate_dict['ukbench00120.jpg'] == [('ukbench00120_resize.jpg', 0)]",cannot be refactored by truth value test,Cannot refactor,-1
self.annotations_off != 0,self.annotations_off,self.annotations_off,1
self.group.rank() == 0,not self.group.rank(),not self.group.rank(),1
self.group == get_pipeline_parallel_group(),cannot be refactored by truth value test,Cannot refactor,-1
__name__ == '__main__',cannot be refactored by truth value test,Cannot refactor,-1
org_size == 0,not org_size,not org_size,1
split == 'train',cannot be refactored by truth value test,Cannot refactor,-1
split == 'train',cannot be refactored by truth value test,Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],not unscheduled[node],1
unscheduled[node] == 0,not unscheduled[node],not unscheduled[node],1
unscheduled[node] == 0,not unscheduled[node],not unscheduled[node],1
unscheduled[parent] == 0,not unscheduled[parent],not unscheduled[parent],1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[parent] == 0,not unscheduled[parent],Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[parent] == 0,not unscheduled[parent],Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[node] == 0,not unscheduled[node],Cannot refactor,-1
unscheduled[parent] == 0,not unscheduled[parent],Cannot refactor,-1
a2.dtype == np.float64,cannot be refactored by truth value test,Cannot refactor,-1
la.norm(a - a2) == 0,cannot be refactored by truth value test,not la.norm(a - a2),0
a2.dtype == np.float32,cannot be refactored by truth value test,Cannot refactor,-1
response == 0,not response,not response,1
len(response.keys()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(response.keys()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
self.selectFiles == '',not self.selectFiles,Cannot refactor,-1
self.selectedOutFolder == '',not self.selectedOutFolder,Cannot refactor,-1
self.inputType != 3,cannot be refactored by truth value test,Cannot refactor,-1
sf == '',not sf,Cannot refactor,-1
ff == '',not ff,Cannot refactor,-1
splitFrames == 1,cannot be refactored by truth value test,Cannot refactor,-1
exportExt == 0,not exportExt,not exportExt,1
self.inputType != 3,cannot be refactored by truth value test,Cannot refactor,-1
splitSizeX == 0,not splitSizeX,not splitSizeX,1
splitSizeY == 0,not splitSizeY,not splitSizeY,1
exportExt == 1,cannot be refactored by truth value test,Cannot refactor,-1
float(ftp) == 0,not float(ftp),not float(ftp),1
splitSizeX == 0,not splitSizeX,Cannot refactor,-1
splitSizeY == 0,not splitSizeY,Cannot refactor,-1
exportExt == 2,cannot be refactored by truth value test,Cannot refactor,-1
exportExt == 3,cannot be refactored by truth value test,Cannot refactor,-1
self.selectFiles == '',not self.selectFiles,Cannot refactor,-1
self.selectedOutFolder == '',not self.selectedOutFolder,Cannot refactor,-1
self.inputType != 3,cannot be refactored by truth value test,Cannot refactor,-1
sf == '',not sf,Cannot refactor,-1
ff == '',not ff,Cannot refactor,-1
splitFrames == 1,cannot be refactored by truth value test,Cannot refactor,-1
exportExt == 0,not exportExt,Cannot refactor,-1
self.inputType != 3,cannot be refactored by truth value test,Cannot refactor,-1
splitSizeX == 0,not splitSizeX,Cannot refactor,-1
splitSizeY == 0,not splitSizeY,Cannot refactor,-1
exportExt == 1,cannot be refactored by truth value test,Cannot refactor,-1
float(ftp) == 0,not float(ftp),Cannot refactor,-1
splitSizeX == 0,not splitSizeX,Cannot refactor,-1
splitSizeY == 0,not splitSizeY,Cannot refactor,-1
exportExt == 2,cannot be refactored by truth value test,Cannot refactor,-1
exportExt == 3,cannot be refactored by truth value test,Cannot refactor,-1
self.selectFiles == '',not self.selectFiles,Cannot refactor,-1
self.selectedOutFolder == '',not self.selectedOutFolder,Cannot refactor,-1
self.inputType != 3,cannot be refactored by truth value test,Cannot refactor,-1
sf == '',not sf,Cannot refactor,-1
ff == '',not ff,Cannot refactor,-1
splitFrames == 1,cannot be refactored by truth value test,Cannot refactor,-1
exportExt == 0,not exportExt,Cannot refactor,-1
self.inputType != 3,cannot be refactored by truth value test,Cannot refactor,-1
splitSizeX == 0,not splitSizeX,Cannot refactor,-1
splitSizeY == 0,not splitSizeY,Cannot refactor,-1
exportExt == 1,cannot be refactored by truth value test,Cannot refactor,-1
float(ftp) == 0,not float(ftp),Cannot refactor,-1
splitSizeX == 0,not splitSizeX,Cannot refactor,-1
splitSizeY == 0,not splitSizeY,Cannot refactor,-1
exportExt == 2,cannot be refactored by truth value test,Cannot refactor,-1
exportExt == 3,cannot be refactored by truth value test,Cannot refactor,-1
self.selectFiles == '',not self.selectFiles,Cannot refactor,-1
self.selectedOutFolder == '',not self.selectedOutFolder,Cannot refactor,-1
self.inputType != 3,cannot be refactored by truth value test,Cannot refactor,-1
sf == '',not sf,Cannot refactor,-1
ff == '',not ff,Cannot refactor,-1
splitFrames == 1,cannot be refactored by truth value test,Cannot refactor,-1
exportExt == 0,not exportExt,Cannot refactor,-1
self.inputType != 3,cannot be refactored by truth value test,Cannot refactor,-1
splitSizeX == 0,not splitSizeX,Cannot refactor,-1
splitSizeY == 0,not splitSizeY,Cannot refactor,-1
exportExt == 1,cannot be refactored by truth value test,Cannot refactor,-1
float(ftp) == 0,not float(ftp),Cannot refactor,-1
splitSizeX == 0,not splitSizeX,Cannot refactor,-1
splitSizeY == 0,not splitSizeY,Cannot refactor,-1
exportExt == 2,cannot be refactored by truth value test,Cannot refactor,-1
exportExt == 3,cannot be refactored by truth value test,Cannot refactor,-1
madtc.api_kwargs == {},not madtc.api_kwargs,not madtc.api_kwargs,1
madtc.message_auto_delete_time == self.message_auto_delete_time,cannot be refactored by truth value test,Cannot refactor,-1
is_dir_mock.call_count == 1,cannot be refactored by truth value test,Cannot refactor,-1
scan_mock.call_count == 0,not scan_mock.call_count,not scan_mock.call_count,1
len(project.get_loaded_projects()) == 0,not project.get_loaded_projects(),not project.get_loaded_projects(),1
len(project.get_loaded_projects()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(project.get_loaded_projects()) == 0,not project.get_loaded_projects(),not project.get_loaded_projects(),1
len(project.get_loaded_projects()) == 0,not project.get_loaded_projects(),Cannot refactor,-1
len(project.get_loaded_projects()) == 1,cannot be refactored by truth value test,Cannot refactor,-1
len(project.get_loaded_projects()) == 0,not project.get_loaded_projects(),Cannot refactor,-1
epoch % config.save_steps == 0,not epoch % config.save_steps,not epoch % config.save_steps,1
epoch % config.save_steps == 0,cannot be refactored by truth value test,Cannot refactor,-1
d_epoch % config.dis_interval == 0,not d_epoch % config.dis_interval,not d_epoch % config.dis_interval,1
g_epoch % config.gen_interval == 0,not g_epoch % config.gen_interval,not g_epoch % config.gen_interval,1
epoch % config.save_steps == 0,cannot be refactored by truth value test,Cannot refactor,-1
epoch % config.save_steps == 0,not epoch % config.save_steps,Cannot refactor,-1
d_epoch % config.dis_interval == 0,not d_epoch % config.dis_interval,Cannot refactor,-1
g_epoch % config.gen_interval == 0,not g_epoch % config.gen_interval,Cannot refactor,-1
epoch % config.save_steps == 0,not epoch % config.save_steps,Cannot refactor,-1
epoch % config.save_steps == 0,not epoch % config.save_steps,Cannot refactor,-1
d_epoch % config.dis_interval == 0,not d_epoch % config.dis_interval,Cannot refactor,-1
g_epoch % config.gen_interval == 0,not g_epoch % config.gen_interval,Cannot refactor,-1
args['default'].verb == Verb.summary,cannot be refactored by truth value test,Cannot refactor,-1
args['default'].incremental == True,not args['default'].incremental,args['default'].incremental,0
i == 0,not i,Cannot refactor,-1
i == n - 1,cannot be refactored by truth value test,Cannot refactor,-1
len(x) == 0,not x,not x,1
MockUnitTest.probabilistic_case_counter % 2 == 0,cannot be refactored by truth value test,not MockUnitTest.probabilistic_case_counter % 2,0
cp == 0,cannot be refactored by truth value test,not cp,0
cp == 65533,cannot be refactored by truth value test,Cannot refactor,-1
cp == 0,cannot be refactored by truth value test,Cannot refactor,-1
cp == 65533,cannot be refactored by truth value test,Cannot refactor,-1
fork_left == 0,not fork_left,not fork_left,1
grid_rois.shape[0] != 0,cannot be refactored by truth value test,grid_rois.shape[0],0
num_gpus == 0,not num_gpus,not num_gpus,1
row == 0,not row,not row,1
column == 0,not column,not column,1
row == 0,not row,Cannot refactor,-1
column == 0,not column,Cannot refactor,-1
row == 0,not row,Cannot refactor,-1
column == 0,not column,Cannot refactor,-1
row == 0,not row,Cannot refactor,-1
column == 0,not column,Cannot refactor,-1
ret.exitcode == 0,not ret.exitcode,not ret.exitcode,1
ret.json == 'returnTOmaster',cannot be refactored by truth value test,Cannot refactor,-1
ret.exitcode == 0,not ret.exitcode,not ret.exitcode,1
ret.exitcode == 0,not ret.exitcode,not ret.exitcode,1
ret.json[target] == 'returnTOmaster',cannot be refactored by truth value test,Cannot refactor,-1
ret.exitcode == 0,not ret.exitcode,Cannot refactor,-1
ret.json == 'returnTOmaster',cannot be refactored by truth value test,Cannot refactor,-1
ret.exitcode == 0,not ret.exitcode,Cannot refactor,-1
ret.exitcode == 0,not ret.exitcode,Cannot refactor,-1
ret.json[target] == 'returnTOmaster',cannot be refactored by truth value test,Cannot refactor,-1
ret.exitcode == 0,not ret.exitcode,Cannot refactor,-1
ret.json == 'returnTOmaster',cannot be refactored by truth value test,Cannot refactor,-1
ret.exitcode == 0,not ret.exitcode,Cannot refactor,-1
ret.exitcode == 0,not ret.exitcode,Cannot refactor,-1
ret.json[target] == 'returnTOmaster',cannot be refactored by truth value test,Cannot refactor,-1
loss == 0.0,not loss,not loss,1
data_context_parameterized_expectation_suite._evaluation_parameter_dependencies == {},not data_context_parameterized_expectation_suite._evaluation_parameter_dependencies,not data_context_parameterized_expectation_suite._evaluation_parameter_dependencies,1
"data_context_parameterized_expectation_suite._evaluation_parameter_dependencies == {'source_diabetes_data.default': [{'metric_kwargs_id': {'column=patient_nbr': ['expect_column_unique_value_count_to_be_between.result.observed_value']}}], 'source_patient_data.default': ['expect_table_row_count_to_equal.result.observed_value']}",cannot be refactored by truth value test,Cannot refactor,-1
self._json == {},not self._json,not self._json,1
padding != 0,padding,padding,1
stride == 1,cannot be refactored by truth value test,Cannot refactor,-1
current == 0,not current,not current,1
current == 0,not current,Cannot refactor,-1
result.exit_code == 0,not result.exit_code,not result.exit_code,1
"cli.main(['--config', str(config), str(py_file)]) == 0","not cli.main(['--config', str(config), str(py_file)])","not cli.main(['--config', str(config), str(py_file)])",1
r != None,r is not None,Cannot refactor,-1
r.status_code == 200,cannot be refactored by truth value test,Cannot refactor,-1
r != None,r is not None,Cannot refactor,-1
r.status_code == 200,cannot be refactored by truth value test,Cannot refactor,-1
self.num_dump == 0,not self.num_dump,not self.num_dump,1
self.num_dump == 0,not self.num_dump,Cannot refactor,-1
stack_index == 0,not stack_index,not stack_index,1
match_index == -1,cannot be refactored by truth value test,Cannot refactor,-1
crash_stacks[0][start_index_crash_stack_1] != crash_stacks[1][start_index_crash_stack_2],cannot be refactored by truth value test,Cannot refactor,-1
first_key == [],not first_key,not first_key,1
rank == 0,not rank,not rank,1
rank == 0,not rank,not rank,1
rank == 0,not rank,Cannot refactor,-1
rank == 0,not rank,Cannot refactor,-1
len(result) == 1,cannot be refactored by truth value test,Cannot refactor,-1
result[0].trading_person == '巩国平',cannot be refactored by truth value test,Cannot refactor,-1
result[0].volume == 8400,cannot be refactored by truth value test,Cannot refactor,-1
result[0].price == None,not result[0].price,not result[0].price,1
result[0].holding == 18700,cannot be refactored by truth value test,Cannot refactor,-1
result[0].trading_way == '增持',cannot be refactored by truth value test,Cannot refactor,-1
result[0].manager_position == '职工监事',cannot be refactored by truth value test,Cannot refactor,-1
result[0].manager == '巩国平',cannot be refactored by truth value test,Cannot refactor,-1
result[0].relationship_with_manager == '本人',cannot be refactored by truth value test,Cannot refactor,-1
layer_num == 0,not layer_num,not layer_num,1
batch_id % debug_steps == 0,not batch_id % debug_steps,Cannot refactor,-1
set == 0,cannot be refactored by truth value test,not set,0
obj_num == 0,not obj_num,not obj_num,1
set == 0,cannot be refactored by truth value test,Cannot refactor,-1
obj_num == 0,not obj_num,Cannot refactor,-1
bboxes.numel() == 0,cannot be refactored by truth value test,not bboxes.numel(),0
"(steps_per_quarter, steps_per_second).count(None) != 1","(steps_per_quarter, steps_per_second).count(None) == 0",Cannot refactor,-1
"(slice_bars, slice_steps).count(None) == 0","not (slice_bars, slice_steps).count(None)","not (slice_bars, slice_steps).count(None)",1
self.firstfree[0] == 0,not self.firstfree[0],not self.firstfree[0],1
amount == 0,not amount,not amount,1
index == 1,cannot be refactored by truth value test,Cannot refactor,-1
self.firstfree[0] == 0,not self.firstfree[0],Cannot refactor,-1
amount == 0,not amount,Cannot refactor,-1
index == 1,cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,not theKeys,1
theKeys == [],not theKeys,not theKeys,1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],not theRefs['@pov'],1
theRefs['@char'] == [],not theRefs['@char'],not theRefs['@char'],1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),not theIndex.getBackReferenceList(None),1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] or theIndex.getTagSource('John')[2],Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,not theIndex.getNovelWordCount(True) - 6,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)","not theIndex.getTableOfContents(0, True)",1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)","not theIndex.getTableOfContents(1, True)",1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)","not theIndex.getTableOfContents(0, False)",1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),not theIndex.getHandleWordCounts(bHandle),1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),not theIndex.getHandleHeaders(bHandle),1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] != 0 or theIndex.getTagSource('John')[2] != 'T000000',Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,not theIndex.getNovelWordCount(True) - 6,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] != 0 or theIndex.getTagSource('John')[2] != 'T000000',Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] != 0 or theIndex.getTagSource('John')[2] != 'T000000',Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,not theIndex.getNovelWordCount(True) - 6,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] != 0 or theIndex.getTagSource('John')[2] != 'T000000',Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] != 0 or theIndex.getTagSource('John')[2] != 'T000000',Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,not theIndex.getNovelWordCount(True) - 6,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John'),Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,not theIndex.getNovelWordCount(True) - 6,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] != 0 or theIndex.getTagSource('John')[2] != 'T000000',Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,not theIndex.getNovelWordCount(True) - 6,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] != 0 or theIndex.getTagSource('John')[2] != 'T000000',Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,not theIndex.getNovelWordCount(True) - 6,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == ['%s:T000001' % nHandle],cannot be refactored by truth value test,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
theKeys == [],not theKeys,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@pov'] == [],not theRefs['@pov'],Cannot refactor,-1
theRefs['@char'] == [],not theRefs['@char'],Cannot refactor,-1
theRefs['@pov'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theRefs['@char'] == ['Jane'],cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getBackReferenceList(None) == {},not theIndex.getBackReferenceList(None),Cannot refactor,-1
theRefs == {nHandle: 'T000001'},cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('Jane') == (cHandle, 2, 'T000001')",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTagSource('John') == (None, 0, 'T000000')",not theIndex.getTagSource('John') or theIndex.getTagSource('John')[1] or theIndex.getTagSource('John')[2],Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 152,cannot be refactored by truth value test,Cannot refactor,-1
wC == 28,cannot be refactored by truth value test,Cannot refactor,-1
pC == 4,cannot be refactored by truth value test,Cannot refactor,-1
cC == 62,cannot be refactored by truth value test,Cannot refactor,-1
wC == 12,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
cC == 90,cannot be refactored by truth value test,Cannot refactor,-1
wC == 16,cannot be refactored by truth value test,Cannot refactor,-1
pC == 2,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(True) == [hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex._listNovelHandles(False) == [nHandle, hHandle, sHandle, tHandle]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(False) == 34,cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getNovelWordCount(True) == 6,cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(False) == [0, 2, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getNovelTitleCounts(True) == [0, 0, 1, 2, 0]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, True) == []","not theIndex.getTableOfContents(0, True)",Cannot refactor,-1
"theIndex.getTableOfContents(1, True) == []","not theIndex.getTableOfContents(1, True)",Cannot refactor,-1
"theIndex.getTableOfContents(2, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 6)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(3, True) == [('%s:T000001' % hHandle, 2, 'Chapter One', 2), ('%s:T000001' % sHandle, 3, 'Scene One', 2), ('%s:T000001' % tHandle, 3, 'Scene Two', 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getTableOfContents(0, False) == []","not theIndex.getTableOfContents(0, False)",Cannot refactor,-1
"theIndex.getTableOfContents(1, False) == [('%s:T000001' % nHandle, 1, 'Hello World!', 12), ('%s:T000011' % nHandle, 1, 'Hello World!', 22)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleWordCounts(bHandle) == [],not theIndex.getHandleWordCounts(bHandle),Cannot refactor,-1
"theIndex.getHandleWordCounts(hHandle) == [('%s:T000001' % hHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(sHandle) == [('%s:T000001' % sHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(tHandle) == [('%s:T000001' % tHandle, 2)]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleWordCounts(nHandle) == [('%s:T000001' % nHandle, 12), ('%s:T000011' % nHandle, 16)]",cannot be refactored by truth value test,Cannot refactor,-1
theIndex.getHandleHeaders(bHandle) == [],not theIndex.getHandleHeaders(bHandle),Cannot refactor,-1
"theIndex.getHandleHeaders(hHandle) == [('T000001', 'H2', 'Chapter One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(sHandle) == [('T000001', 'H3', 'Scene One')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(tHandle) == [('T000001', 'H3', 'Scene Two')]",cannot be refactored by truth value test,Cannot refactor,-1
"theIndex.getHandleHeaders(nHandle) == [('T000001', 'H1', 'Hello World!'), ('T000011', 'H1', 'Hello World!')]",cannot be refactored by truth value test,Cannot refactor,-1
cass.play_count == 0,not cass.play_count,not cass.play_count,1
len(cass) == 2,cannot be refactored by truth value test,Cannot refactor,-1
cass.play_count == 2,cannot be refactored by truth value test,Cannot refactor,-1
self.augment_method == 'mt',cannot be refactored by truth value test,Cannot refactor,-1
self.augment_method == 'mt',cannot be refactored by truth value test,Cannot refactor,-1
line_cnt % 10000 == 0,cannot be refactored by truth value test,not line_cnt % 10000,0
len(items) == 3,cannot be refactored by truth value test,Cannot refactor,-1
"get_root(x_src, parent) != get_root(x_tgt, parent)",cannot be refactored by truth value test,Cannot refactor,-1
"cnt[get_root(i, parent)] == 1",cannot be refactored by truth value test,Cannot refactor,-1
embed_dim % num_embed_chunks == 0,cannot be refactored by truth value test,not embed_dim % num_embed_chunks,0
num_embed_chunks == 1,cannot be refactored by truth value test,Cannot refactor,-1
num_embed_chunks == 1,cannot be refactored by truth value test,Cannot refactor,-1
heatmap.max() - heatmap.min() != 0,cannot be refactored by truth value test,heatmap.max() - heatmap.min(),0
X.shape[0] == 0,cannot be refactored by truth value test,not X.shape[0],0
ret['retcode'] != 0,cannot be refactored by truth value test,ret['retcode'],0
"where == [Or(conditions=[And(conditions=[_cond('group_id', Op.EQ, self.group1.id), _tag('a', 'b')]), _cond('group_id', Op.EQ, self.group2.id)])]",cannot be refactored by truth value test,Cannot refactor,-1
having == [],not having,not having,1
axis == 'X',cannot be refactored by truth value test,Cannot refactor,-1
angle == 0,not angle,not angle,1
axis == 'Y',cannot be refactored by truth value test,Cannot refactor,-1
self._get_kibana_subdirfiles('index-pattern') == [],not self._get_kibana_subdirfiles('index-pattern'),not self._get_kibana_subdirfiles('index-pattern'),1
_type == 'index-pattern',cannot be refactored by truth value test,Cannot refactor,-1
e.code == 409,cannot be refactored by truth value test,Cannot refactor,-1
e.code == 404,cannot be refactored by truth value test,Cannot refactor,-1
"FactorOrder(1, 1) == 0","not FactorOrder(1, 1)","not FactorOrder(1, 1)",1
"FactorOrder(1, 2) == -1",cannot be refactored by truth value test,Cannot refactor,-1
"FactorOrder(2, 1) == 1",cannot be refactored by truth value test,Cannot refactor,-1
"FactorOrder(a, b) == 1",cannot be refactored by truth value test,Cannot refactor,-1
build_command.tools.os.chmod.call_count == 0,cannot be refactored by truth value test,not build_command.tools.os.chmod.call_count,0
len(self.unmatched_segments) == 0,not self.unmatched_segments,not self.unmatched_segments,1
game.player2.hero.health == expected_health,cannot be refactored by truth value test,Cannot refactor,-1
game.player2.hero.health == expected_health,cannot be refactored by truth value test,Cannot refactor,-1
game.player1.spellpower == 0,not game.player1.spellpower,not game.player1.spellpower,1
game.player1.spellpower == 1,cannot be refactored by truth value test,Cannot refactor,-1
game.player2.hero.health == expected_health,cannot be refactored by truth value test,Cannot refactor,-1
game.player1.spellpower == 1 + 5,cannot be refactored by truth value test,Cannot refactor,-1
game.player2.hero.health == expected_health,cannot be refactored by truth value test,Cannot refactor,-1
game.player2.hero.health == expected_health,cannot be refactored by truth value test,Cannot refactor,-1
game.player2.hero.health == expected_health,cannot be refactored by truth value test,Cannot refactor,-1
game.player2.hero.health == expected_health,cannot be refactored by truth value test,Cannot refactor,-1
game.player2.hero.health == expected_health,cannot be refactored by truth value test,Cannot refactor,-1
len(entitlements) != 0,entitlements,entitlements,1
role == 'User',cannot be refactored by truth value test,Cannot refactor,-1
role == 'User',cannot be refactored by truth value test,Cannot refactor,-1
fc == 0,not fc,not fc,1
fc == 0,not fc,not fc,1
fz == 0,not fz,not fz,1
uix == 0,cannot be refactored by truth value test,Cannot refactor,-1
fc == 0,not fc,Cannot refactor,-1
fc == 0,not fc,Cannot refactor,-1
fz == 0,not fz,Cannot refactor,-1
uix == 0,cannot be refactored by truth value test,Cannot refactor,-1
fc == 0,not fc,Cannot refactor,-1
fc == 0,not fc,Cannot refactor,-1
fz == 0,not fz,Cannot refactor,-1
uix == 0,cannot be refactored by truth value test,Cannot refactor,-1
N == 0,cannot be refactored by truth value test,not N,0
p.sum() == 0,not p.sum(),not p.sum(),1
N == 0,cannot be refactored by truth value test,Cannot refactor,-1
p.sum() == 0,not p.sum(),Cannot refactor,-1
cur == None,not cur,not cur,1
i.memory_size != 0,cannot be refactored by truth value test,i.memory_size,0
i.memory_size != 0,cannot be refactored by truth value test,Cannot refactor,-1
cur == None,not cur,Cannot refactor,-1
i.memory_size != 0,cannot be refactored by truth value test,Cannot refactor,-1
i.memory_size != 0,cannot be refactored by truth value test,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
block != 0,block,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
block != 0,block,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
block != 0,block,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
block != 0,block,Cannot refactor,-1
block == 2,cannot be refactored by truth value test,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
block != 0,block,Cannot refactor,-1
i == 0,not i,Cannot refactor,-1
block != 0,block,Cannot refactor,-1
len(results) == 2,cannot be refactored by truth value test,Cannot refactor,-1
mock_emit.call_count == 0,not mock_emit.call_count,not mock_emit.call_count,1
key != key2,cannot be refactored by truth value test,Cannot refactor,-1
key != key3,cannot be refactored by truth value test,Cannot refactor,-1
key2 != key3,cannot be refactored by truth value test,Cannot refactor,-1
len(util._training_cache._key_to_dataset) == 1,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx == 0,not dataset_idx,not dataset_idx,1
train_rows == train_rows1,cannot be refactored by truth value test,Cannot refactor,-1
val_rows == val_rows1,cannot be refactored by truth value test,Cannot refactor,-1
metadata == metadata1,cannot be refactored by truth value test,Cannot refactor,-1
avg_row_size == avg_row_size1,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx1 == 0,not dataset_idx1,not dataset_idx1,1
train_rows == train_rows3,cannot be refactored by truth value test,Cannot refactor,-1
val_rows == val_rows3,cannot be refactored by truth value test,Cannot refactor,-1
metadata == metadata3,cannot be refactored by truth value test,Cannot refactor,-1
avg_row_size == avg_row_size3,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx3 == 0,not dataset_idx3,not dataset_idx3,1
len(util._training_cache._key_to_dataset) == 2,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
key != key2,cannot be refactored by truth value test,Cannot refactor,-1
key != key3,cannot be refactored by truth value test,Cannot refactor,-1
key2 != key3,cannot be refactored by truth value test,Cannot refactor,-1
len(util._training_cache._key_to_dataset) == 1,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx == 0,not dataset_idx,Cannot refactor,-1
train_rows == train_rows1,cannot be refactored by truth value test,Cannot refactor,-1
val_rows == val_rows1,cannot be refactored by truth value test,Cannot refactor,-1
metadata == metadata1,cannot be refactored by truth value test,Cannot refactor,-1
avg_row_size == avg_row_size1,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx1 == 0,not dataset_idx1,Cannot refactor,-1
train_rows == train_rows3,cannot be refactored by truth value test,Cannot refactor,-1
val_rows == val_rows3,cannot be refactored by truth value test,Cannot refactor,-1
metadata == metadata3,cannot be refactored by truth value test,Cannot refactor,-1
avg_row_size == avg_row_size3,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx3 == 0,not dataset_idx3,Cannot refactor,-1
len(util._training_cache._key_to_dataset) == 2,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
key != key2,cannot be refactored by truth value test,Cannot refactor,-1
key != key3,cannot be refactored by truth value test,Cannot refactor,-1
key2 != key3,cannot be refactored by truth value test,Cannot refactor,-1
len(util._training_cache._key_to_dataset) == 1,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx == 0,not dataset_idx,Cannot refactor,-1
train_rows == train_rows1,cannot be refactored by truth value test,Cannot refactor,-1
val_rows == val_rows1,cannot be refactored by truth value test,Cannot refactor,-1
metadata == metadata1,cannot be refactored by truth value test,Cannot refactor,-1
avg_row_size == avg_row_size1,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx1 == 0,not dataset_idx1,Cannot refactor,-1
train_rows == train_rows3,cannot be refactored by truth value test,Cannot refactor,-1
val_rows == val_rows3,cannot be refactored by truth value test,Cannot refactor,-1
metadata == metadata3,cannot be refactored by truth value test,Cannot refactor,-1
avg_row_size == avg_row_size3,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx3 == 0,not dataset_idx3,Cannot refactor,-1
len(util._training_cache._key_to_dataset) == 2,cannot be refactored by truth value test,Cannot refactor,-1
dataset_idx2 == 1,cannot be refactored by truth value test,Cannot refactor,-1
among_var == 0,not among_var,not among_var,1
among_var == 0,not among_var,not among_var,1
among_var == 1,cannot be refactored by truth value test,Cannot refactor,-1
among_var == 2,cannot be refactored by truth value test,Cannot refactor,-1
among_var == 0,not among_var,Cannot refactor,-1
among_var == 0,not among_var,Cannot refactor,-1
among_var == 1,cannot be refactored by truth value test,Cannot refactor,-1
among_var == 2,cannot be refactored by truth value test,Cannot refactor,-1
Block.objects.count() == 3,cannot be refactored by truth value test,Cannot refactor,-1
BlocklistSubmission.objects.count() == 0,not BlocklistSubmission.objects.count(),not BlocklistSubmission.objects.count(),1
response.status_code == 200,cannot be refactored by truth value test,Cannot refactor,-1
mc.losses_model == mc.no_extra_losses,cannot be refactored by truth value test,Cannot refactor,-1
m.call_count == 0,not m.call_count,not m.call_count,1
mc.results.losses == 1,cannot be refactored by truth value test,Cannot refactor,-1
group == 0,not group,not group,1
value == 1,cannot be refactored by truth value test,Cannot refactor,-1
value == 0,not value,not value,1
os.path.exists('cookies.json') == False,cannot be refactored by truth value test,not os.path.exists('cookies.json'),0
json_resp[0]['repo_id'] == self.repo_id,cannot be refactored by truth value test,Cannot refactor,-1
json_resp[0]['path'] == '/',cannot be refactored by truth value test,Cannot refactor,-1
json_resp[0]['share_type'] == 'group',cannot be refactored by truth value test,Cannot refactor,-1
json_resp[0]['group_id'] == self.group_id,cannot be refactored by truth value test,Cannot refactor,-1
json_resp[0]['permission'] == 'rw',cannot be refactored by truth value test,Cannot refactor,-1
json_resp[0]['is_admin'] == True,not json_resp[0]['is_admin'],json_resp[0]['is_admin'],0
